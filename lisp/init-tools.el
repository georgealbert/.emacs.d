;;; init-tools.el -*- lexical-binding: t; -*-

;; tools/flycheck/autoload.el
(defun +flycheck|init-popups ()
  "Activate `flycheck-posframe-mode' if available and in GUI Emacs.
Activate `flycheck-popup-tip-mode' otherwise.
Do nothing if `lsp-ui-mode' is active and `lsp-ui-sideline-enable' is non-nil."
  (unless (and (bound-and-true-p lsp-ui-mode)
               lsp-ui-sideline-enable)
    (if (and (fboundp 'flycheck-posframe-mode)
             (display-graphic-p))
        (flycheck-posframe-mode +1)
      (flycheck-popup-tip-mode +1))))

(use-package flycheck-posframe
  ;; :when (and EMACS26+ (featurep! +childframe))
  :defer t
  :init (add-hook 'flycheck-mode-hook #'+flycheck|init-popups)
  :config
  (setq flycheck-posframe-warning-prefix "☎ "
        flycheck-posframe-info-prefix "··· "
        flycheck-posframe-error-prefix "✕ "))

(defun albert/datastruct-member (tag)
  "parse tag generated by semantic-parse-region."

  (defun fp-str (str ftag)
    "function pointer args to str. 函数指针参数的处理.如ngx_tcp_module_t里的函数指针"
    (cond
     ((null ftag) "")
     ((cond
       ((semantic-tag-p ftag)
        (let* ((name (semantic-tag-name ftag))
               (type (semantic-tag-get-attribute ftag :type))
               (pointer (semantic-tag-get-attribute ftag :pointer)))
          (cond
           ((atom type) (setq str (concat str (format "%s " type))))
           ((semantic-tag-p type) 
            (setq str (concat str (format "%s " (semantic-tag-name type))))))
          
          (if (numberp pointer)
              (setq str (concat str (make-string pointer ?*))))

          (setq str (concat str (format "%s, " name)))
          ))
       (t (setq str (concat (fp-str str (car ftag)) (fp-str str (cdr ftag)))))
       ))
     ))

  (defun var-str (str index vtag)
    (setq str (format "    <f%d>" index))
    (cond
     ((null vtag) "")
     ((cond
       ((semantic-tag-p vtag)
        (let* ((name (semantic-tag-name vtag))
               (type (semantic-tag-get-attribute vtag :type))
               ;;(function-pointer (semantic-tag-get-attribute vtag :function-pointer))
               (pointer (semantic-tag-get-attribute vtag :pointer)))
          (cond
           ((atom type) (setq str (concat str (format "%s " type))))
           ;; 函数指针要单独处理,如ngx_tcp_module_t里的函数指针
           ((semantic-tag-p type) 
            (setq str (concat str (format "%s " (semantic-tag-name type))))))
          
          (if (numberp pointer)
              (setq str (concat str (make-string pointer ?*))))

          (if (semantic-tag-get-attribute vtag :function-pointer)
              (let* ((tmp (fp-str "" (semantic-tag-components vtag)))
                     (args (substring tmp 0 (- (length tmp) 2))))
                (setq str (format "%s(*%s)(%s) \\l|\\\n" str name args)))
            (concat str (format "%s \\l|\\\n" name)))
          ))
       (t (concat (var-str str (+ index 1) (car vtag)) (var-str str (+ index 1) (cdr vtag))))
       ))
     ))
  (var-str "" 0 tag))

(defun albert/datastruct-dot-head (tag)
  "datastruct name to dot head."
  (let ((name (semantic-tag-name tag)))
    (format "subgraph cluster_%s {
  node [shape=record fontsize=12 fontname=Courier style=filled];
  color=lightgray;
  style=filled;
  label = \"Struct %s\";
  edge[color=\"#2e3436\"];
  node_%s [shape=record label=\"\n" name name name)))

(defun albert/datastruct-dot-end (str)
  "datastruct to dot end string. 去掉最后一个字段的\l|\n"
  (concat (substring str 0 (- (length str) 3)) "\"];
}\n"))

(defun albert/semantic-lex-buffer (start end)
  "parse c datastruct definition using semantic and insert it into `buffer'"
  (interactive "rp")
  (message "start=%d, end=%d" start end)
  (let* ((tag (car (semantic-parse-region start end)))
         (members (plist-get (semantic-tag-class (semantic-tag-get-attribute tag :typedef)) :members)))
    ;; (message "%s\n" tag)
    ;;(message "%s" (albert/datastruct-dot-head tag))
    ;; (message "%s" (albert/datastruct-member (semantic-tag-components tag)))
    (let* ((body (albert/datastruct-member (semantic-tag-components tag)))
           (dot_str (albert/datastruct-dot-end body)))
      ;;(message "%s" (albert/datastruct-dot-end body))
      (save-excursion
        ;;(iter 0)
        (set-buffer (get-buffer-create "tmp.dot"))
        ;;(graphviz-dot-mode)
        (setq pos (point-max))
        (insert (albert/datastruct-dot-head tag) 
                dot_str)
        (goto-char (point-max))
        (delete-char -1)
        )

      (if (one-window-p)
          (split-window-vertically))

      (switch-to-buffer-other-window "tmp.dot")
      (goto-char (point-min))
      )))

;; (plist-get (nthcdr 2 (semantic-tag-get-attribute tag :typedef)) :members))

;; (message (semantic-parse-region start end 1)))
;; (message (semantic-c-lexer start end 1)))
;; (message (semantic-lex-buffer)))
;;(semantic-lex start end 1))

;; disable default vc
(setq vc-handled-backends nil)

(use-package magit
  ;; :load-path "~/elisp/magit/lisp"
  :mode (("\\COMMIT_EDITMSG\\'" . text-mode)
         ("\\MERGE_MSG\\'" . text-mode))
  :bind (("C-x g" . magit-status)
         ("C-x M-g" . magit-dispatch)
         ("C-c M-g" . magit-file-popup))
  :config
  (progn
    (setq magit-last-seen-setup-instructions "1.4.0")))

(use-package ggtags
  :ensure t
  :defer t)

(add-hook 'c-mode-common-hook
          (lambda ()
            (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
              (progn
                ;; (flycheck-mode 1)
                (ggtags-mode 1)))))

;; (use-package undo-tree
;;   :ensure t
;;   :defer t
;;   ;; :diminish undo-tree-mode
;;   :diminish
;;   :config
;;   (progn
;;     (global-undo-tree-mode)
;;     (setq undo-tree-visualizer-timestamps t)
;;     (setq undo-tree-visualizer-diff t)))

(use-package aweshell
  :load-path "~/.emacs.d/site-lisp/extensions/aweshell"
  :bind (("s-n" . aweshell-new)
         ("s-h" . aweshell-toggle)
         ("s-x s-x" . aweshell-dedicated-toggle)))

(defun my-overview-of-current-buffer ()
  "toggle overview,  @see http://emacs.wordpress.com/2007/01/16/quick-and-dirty-code-folding/
"
  (interactive)
  (set-selective-display (if selective-display nil 1)))

(provide 'init-tools)
