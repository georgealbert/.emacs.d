
* basic setting
** elpa

#+BEGIN_SRC emacs-lisp
(require 'package)
(add-to-list 'package-archives
  '("melpa" . "http://melpa.org/packages/") t)

;(setq url-proxy-services
;   '(("no_proxy" . "^\\(localhost\\|10.*\\)")
;     ("http" . "134.80.3.27:8080")
;     ("https" . "134.80.3.27:8080")))

(package-initialize)
;(setq package-user-dir (concat dotfiles-dir "/elpa"))

(setq use-package-verbose t)
(require 'use-package)
#+end_src

** HOME
设置默认工作目录到HOME目录，不设置的话是 /emacs安装目录/bin/ 。

#+BEGIN_SRC emacs-lisp
(setq default-directory "~/")
#+END_SRC

** UTF-8
[2014-09-17 14:59:51]

文件名在emacs使用utf-8的默认编码的时候是乱码，win下指定编码为gbk。
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)

(if (eq system-type 'windows-nt)
  (setq file-name-coding-system 'gbk)
)
#+END_SRC

** 去掉启动欢迎界面

#+begin_src emacs-lisp
(setq inhibit-startup-message t) 
#+end_src

** 不要总是没完没了的问yes or no

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** 不显示工具栏和滚动条
[2014-11-18 周二 17:39:59] 把scrollbar也去掉了

#+begin_src emacs-lisp
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** 光标靠近鼠标的时候，让鼠标自动让开，别挡住视线

#+begin_src emacs-lisp
(mouse-avoidance-mode 'animate)
#+end_src

** Frame title

#+begin_src emacs-lisp
;;(setq frame-title-format "Albert@%b")
(setq frame-title-format "Albert@%f")
#+end_src

** minibuffer
[2014-09-12 09:24:17]

It often displays so much information, even temporarily, that it is nice to give
it some room to breath.

#+BEGIN_SRC emacs-lisp
(setq resize-mini-windows t)
(setq max-mini-window-height 0.33)
#+END_SRC

** Backups
[2014-09-12 09:32:53]

This is one of the things people usually want to change right away. By default, 
Emacs saves backup files in the current directory. These are the files ending in ~ that are cluttering up your directory lists. 
The following code stashes them all in ~/.emacs.d/backups, where I can find them with C-x C-f (find-file) if I really need to.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup")))

;; 自动存盘
(setq auto-save-mode t) 
#+END_SRC

Disk space is cheap. Save lots.

#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

** Font setting on win7

可以用 C-u C-x = or C-u g a 来看当前汉字是用什么字体显示的，从而决定应该在这个变量里加什么。
另一个有用的函数是 =describe-fontset=

中文用雅黑，英文用consolas比直接用雅黑的混合字体显示效果好。混合字体针对一个特定的字体大小。
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
  ;(set-fontset-font t 'han (font-spec :family "Microsoft Yahei" :size 12))
  ;(setq face-font-rescale-alist '(("微软雅黑" . 1.2) ("Microsoft Yahei" . 1.2)))
  (progn
    ;; Setting English Font
    (set-face-attribute
      'default nil :font "Consolas 11")
    
      ;; Chinese Font
        (dolist (charset '(kana han symbol cjk-misc bopomofo))
                (set-fontset-font (frame-parameter nil 'font)
                          charset
                          (font-spec :family "微软雅黑" :size 15)))))

;;(if (eq system-type 'windows-nt)
;;     (set-face-attribute
;;       'default nil :font "YaHei Consolas Hybrid 11"))

#+END_SRC

** Color theme

emacs24自带的最喜欢的theme。

[2017-04-30 周日 23:55:59] 试了一下solarized，在light mode下不好看，太晃眼，helm不知道选中了哪个，dark mode也一样，org mode中代码的高亮没有了。deeper-blue更好。
#+BEGIN_SRC emacs-lisp
(load-theme 'deeper-blue t)
;; (load-theme 'solarized t)
;; (load-theme 'tango-dark t)
;; (load-theme 'manoj-dark t)
#+END_SRC

** Diredplus

[2014-09-11 10:47:57] 昨天刚开始用的，五颜六色的比较好看。

[2014-11-18 周二 10:54:56] 为什么在24.4上就不显示时间戳和权限了呢？

set =diredp-hide-details-initially-flag= to nil in 24.4 to display details, set
before dired+ loaded

也可以按 =(= 打开或关闭detail显示。

#+BEGIN_SRC emacs-lisp
(setq diredp-hide-details-initially-flag nil)
(use-package dired+
  :defer t)
#+END_SRC

** 多行代码的注释/反注释

其实可以考虑vim的 =<leader> + \= 进行注释的。
#+BEGIN_SRC emacs-lisp
(global-set-key [?\C-c ?\C-/] 'comment-or-uncomment-region)

(defun my-comment-or-uncomment-region (beg end &optional arg)  
  (interactive (if (use-region-p)  
                   (list (region-beginning) (region-end) nil)  
                   (list (line-beginning-position)  
                       (line-beginning-position 2))))  
  (comment-or-uncomment-region beg end arg)  
)  
(global-set-key [remap comment-or-uncomment-region] 'my-comment-or-uncomment-region)  
#+END_SRC

** ibuffer

使用emacs时经常需要管理多个buffer， /C-x C-b/ 的默认界面太过简陋。emacs事实上已
经提供了更好的buffer管理界面ibuffer，在配置文件中选用即可。

启用ibuffer支持，增强 *buffer*, 用了helm，ibuffer可以退休了。  
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :defer t
  :config
    (progn
      (global-set-key (kbd "C-x C-b") 'ibuffer)))  
#+END_SRC

** Performace problem

[2014-09-12 09:34:00] 就算这样有时候会很卡，xp下就好多了，怀疑和win7/域用户有关。
如果打开会看见很多QueryBasicInformation这样的调用.

#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
    (setq w32-get-true-file-attributes nil)
)
#+END_SRC

** htmlize

为了让org mode中的代码可以语法高亮，不知道新的org 8.2.7c是不是自带了，那就可以不用这个了。

#+BEGIN_SRC emacs-lisp
;(require 'htmlize)
#+END_SRC

** 字体放大缩小

#+BEGIN_SRC emacs-lisp
;; from sacha chua
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+END_SRC

** 显示匹配的括号

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

** Window size

T430的屏幕长了一点，要是全屏的话，org mode的buffer会在右边打开，看见的内容太少了，
控制窗口大小，让buffer显示在下面。

#+BEGIN_SRC emacs-lisp
;; adjust the size of Emacs window for org mode agenda/todo list to display herizontal
(if (eq system-type 'windows-nt)
  ;; (setq default-frame-alist '((top . 0) (left . 0) (height . 42) (width . 159)))
  (toggle-frame-maximized)
)
#+END_SRC

** 显示行、列号

在status bar显示，不在buffer的左侧显示每行的行号，否则真的会很慢。

列号是从0开始的。
#+BEGIN_SRC emacs-lisp
(column-number-mode t)
#+END_SRC

[2014-03-17 17:54:25] 不显示行号，否则速度会非常慢

#+BEGIN_SRC emacs-lisp
;;另外一个显示行号的插件，个人更喜欢的风格
;(require 'linum)
;(global-linum-mode t)
#+END_SRC

** F5插入当前时间
insert current time，要加上(interactive)啊，为什么呢？

#+BEGIN_EXAMPLE
M-: (insert (format-time-string "[%Y-%m-%d %a %T]"))
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(global-set-key [(f5)] '(lambda () (interactive) 
(insert (format-time-string "[%Y-%m-%d %a %T]"))
))
#+END_SRC

** Reading

https://github.com/xahlee/xah_emacs_init/blob/master/xah_emacs_font.el From Xah Lee:

#+BEGIN_SRC emacs-lisp
(defun xah-toggle-margin-right ()
  "Toggle the right margin between `fill-column' or window width.
This command is convenient when reading novel, documentation."
  (interactive)
  (if (eq (cdr (window-margins)) nil)
      (set-window-margins nil 0 (- (window-body-width) fill-column))
    (set-window-margins nil 0 0)))
#+END_SRC

** Make window splitting more useful

I added these snippets to my .emacs so that when I split the screen with C-x 2 or C-x 3, 
it opens the previous buffer instead of giving me two panes with the same buffer:

Copied from http://www.reddit.com/r/emacs/comments/25v0eo/you_emacs_tips_and_tricks/chldury

#+BEGIN_SRC emacs-lisp
(defun vsplit-last-buffer ()
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer)
  )
(defun hsplit-last-buffer ()
  (interactive)
   (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer)
  )

(global-set-key (kbd "C-x 2") 'vsplit-last-buffer)
(global-set-key (kbd "C-x 3") 'hsplit-last-buffer)
#+END_SRC

** 图片支持
[2014-09-18 08:49:12]

=M-x list-dynamics-libraries= 找到对应的dll的name。

可以运行下面几行代码检查一下是否已经支持了图片。

#+BEGIN_SRC lisp
(image-type-available-p 'gif)

(image-type-available-p 'jpeg)

(image-type-available-p 'tiff)

(image-type-available-p 'xbm)

(image-type-available-p 'xpm)

(image-type-available-p 'png)
#+END_SRC

这几个函数复制到Lisp模式的buffer，然后在每一行行尾按 *C-j* ，就可以看到每个函数运行的结果，返回 *t* 证明已经可以支持图片了。

win的emacs不能显示图片是因为编译后默认没有带几个dll文件。把dll copy到emacs安装目录的bin目录下，就可以显示图片了。

*** emacs 24.4
+ png
  [2014-11-18 周二 15:48:21] emacs 24.4需要libpng16-16.dll or libpng16.dll 和 zlib1.dll，都在libpng的压缩包里面
  可以从 http://sourceforge.net/projects/ezwinports/files/ 下载

*** emacs 24.3
+ png :: libpng14.dll

#+BEGIN_EXAMPLE
jpeg62.dll
libgcrypt-11.dll
libgnutls-26.dll
libpng14-14.dll
libtasn1-3.dll
libtiff3.dll
libungif4.dll
libXpm.dll
xpm4.dll
zlib1.dll
#+END_EXAMPLE

可以从 https://github.com/winterTTr/emacs-of-winterTTr/tree/master/.emacs.d/extra-bin/dlls 下载

** 输入特殊字符
[2014-09-29 周一 17:20:40]

+  :: C-q C-a

+ C-q X :: 是一个通用的输入特殊字符的解决办法，X 表示一个特殊字符， 在几乎所有的模式下，输入 =C-q= 然后是一个就可以输入这个特殊字符。
一般来说、所有的特殊的字符都和某一个特定的函数绑定在一起 了，例如 C-a , ASCII 1 , 表示 beginning-of-line 。 换行的字符就是 C-j ， ASCII 10。
除了输入 C-j ，还可以输入回车字符的 ASCII 的 8 进制数， 例如 C-q 1 2 。 因为 C-j 对应的 ACSII 是 10, 012 八进制 ， 0xA 十六进制。
#+BEGIN_SRC lisp
(setq read-quoted-char-radix 10)
;or
(setq read-quoted-char-radix 16)
#+END_SRC

可以改为把八进制改为十进制或者十六进制。或者用命令
#+BEGIN_EXAMPLE
M-x set-variable <RET> read-quoted-char-radix <RET>10 
#+END_EXAMPLE

** save the cursor position for every file you opened

Turn on save place so that when opening a file, the cursor will be at the last position.
#+BEGIN_SRC emacs-lisp
;; (require 'saveplace)
;; (setq save-place-file (concat user-emacs-directory "saveplace.el") ) ; use standard emacs dir
;; (setq-default save-place t)
(save-place-mode t)
#+END_SRC

** mode-line
[2014-11-21 周五 10:35:59]

smart-mode-line和powerline都不好用，速度太慢。
#+BEGIN_SRC emacs-lisp
(use-package smart-mode-line
  :disabled t
  :init
  (progn
  (setq-default
   mode-line-format 
   '("%e"
     mode-line-front-space
     mode-line-mule-info
     mode-line-client
     mode-line-modified
     mode-line-remote
     mode-line-frame-identification
     mode-line-buffer-identification
     "   "
     mode-line-position
     (vc-mode vc-mode)
     "  "
     mode-line-modes
     mode-line-misc-info
     mode-line-end-spaces))))

;; 显示日期时间
(setq display-time-day-and-date t)

;(setq display-time-24hr-format t)
;(setq display-time-use-mail-icon t)
(setq display-time-interval 10)
(setq display-time-format "%Y-%m-%d %a %H:%M")
(setq display-time-default-load-average nil)
(display-time)

(require 'diminish)
;(eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
(eval-after-load "undo-tree" '(diminish 'undo-tree-mode))
;(eval-after-load "guide-key" '(diminish 'guide-key-mode))
;(eval-after-load "smartparens" '(diminish 'smartparens-mode))
;(eval-after-load "guide-key" '(diminish 'guide-key-mode))
(eval-after-load "eldoc" '(diminish 'eldoc-mode))
(eval-after-load "org-indent" '(diminish 'org-indent-mode))
(eval-after-load "highlight-parentheses" '(diminish 'highlight-parentheses-mode))

(diminish 'visual-line-mode)

(use-package powerline
  :disabled t
  :ensure t
  :config 
    (progn
       (powerline-center-evil-theme)
       (setq powerline-arrow-shape 'arrow)
       (custom-set-faces  
         '(mode-line ((t (:foreground "white" :background "#8080ff" :box nil))))  
         ;; '(mode-line-inactive ((t (:foreground "white" :background "#ff8080" :box nil))))  
         )))
      ;; (powerline-default-theme)))
      ;; (powerline-center-evil-theme)))
#+END_SRC

* emacs-lisp
[2014-09-27 01:58:44]

lisp语言入门，写得很不错，找不到原出处了 http://www.cnblogs.com/suiqirui19872005/archive/2007/12/05/984517.html

emacs自带的帮助也不错，可以了解emacs lisp的特点，和common lisp的区别慢慢体会。

** 括号高亮
http://www.emacswiki.org/emacs/HighlightParentheses

http://ergoemacs.org/emacs/emacs_editing_lisp.html

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          '(lambda ()
             (highlight-parentheses-mode)))

(define-globalized-minor-mode global-highlight-parentheses-mode
  highlight-parentheses-mode
  (lambda ()
    (highlight-parentheses-mode t)))
(global-highlight-parentheses-mode t)
#+END_SRC

** eldoc-mode
http://sachachua.com/blog/2014/06/read-lisp-tweak-emacs-beginner-24-understand-emacs-lisp-code/

turns on eldoc-mode, which displays the argument list for the current function. 
You can move your cursor around to see argument lists for other functions.
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

* evil

#+BEGIN_SRC emacs-lisp
(require 'evil)
(evil-mode 1)

(setq evil-want-visual-char-semi-exclusive t)
#+end_src

* magit
[2014-09-11 10:22:26] disable emacs自带的vc，用 *process monitor* 看，vc每次打开都会把支持的版本管理都查一遍，会比较慢。
但是去掉了以后，magit没法在status bar上显示文件在哪个branch上了。哎。

process monitor在用了vpn后会导致机器hang。

把vc disable后会快不少，还是去了吧。

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
'(vc-handled-backends (quote (Git))))

;; disable default vc
;(setq vc-handled-backends nil)
#+end_src

[2014-09-11 14:25:06] 即使更新到了0908的magit，仍然发现有多次调用git.exe的情况， *magit-status* 还是慢
把git的path设置到最前面，貌似速度也没快多少，最多0.001s吧。

#+BEGIN_SRC emacs-lisp
;;(if (eq system-type 'windows-nt)
;;    (progn
;;      (setq exec-path (add-to-list 'exec-path "C:/Program Files/Git/bin"))
;;      (setenv "PATH" (concat "C:\\Program Files\\Git\\bin;" (getenv "PATH")))))
(use-package magit
  :defer t
  :config
    (progn
      (setq magit-last-seen-setup-instructions "1.4.0")))
#+end_src

* helm
[2014-09-16 09:27:15]

#+BEGIN_SRC emacs-lisp
(require 'helm-config)
(helm-mode 1)
(global-set-key (kbd "C-c h") 'helm-mini)
(global-set-key (kbd "M-x") 'helm-M-x)
(global-set-key (kbd "C-c a") 'helm-apropos)

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

;setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
;          helm-input-idle-delay 0.01  ; this actually updates things
;                                      ; reeeelatively quickly.
(setq helm-quick-update t
      helm-M-x-requires-pattern nil ; 在M-x时默认就不显示多余的pattern了，看着烦
      helm-ff-skip-boring-files t)
#+END_SRC

** Search buffers by major-mode

+ multi buffer search
  1. *C-c h* 调出helm-mini buffer
  1. 在pattern: 中 输入 *org 选择buffer中的file，可以匹配多个文件
  1. *Esc m* 或者 *M-SPC* mark刚才匹配的files，会高亮
  1. 按 *C-s* search file content
  1. *C-j* 打开buffer并跳到选择的行
  1. *enter* 打开文件

+ M-SPC/Esc-SPC/C-@ :: 用 *M-SPC* 最方便了，mark当前的buffer，如果已经mark了会取消，先C-n/C-p移动到要取消的file

+ M-u :: 取消全部mark的buffer
+ M-a :: mark全部的buffer
     
[2014-09-16 18:24:22] multi search也可以这样，如在所有buffer中org-mode的buffer，然后找 *org @string_to_find 按 *C-s* 就ok了。

+ C-n/C-p/up/down :: 在helm的选项中上下移动
+ left/right :: 在source间移动， *C-o* 移动到下一个source，source就是group分类，如buffer，最近访问的buffer，创建buffer。
+ M-p/M-n :: 命令历史
             
+ mini buffer
  + M-S-d :: kill buffer and quit，就是 *M-D* 。
  + C-c d :: kill buffer without quitting
             
[2014-09-17 15:06:59] 为什么用了heml以后连dired+的 *R* rename file都变成helm的了？

[2014-10-13 周一 17:51:09] helm mini中，选择buffer后，按 =F9= 可以查找，这个更加方便。

** grep

=helm-resume= 恢复上次的command

*** Grep from helm-find-files

From helm-find-files (helm-command-prefix-key C-x C-f) Open the action
menu with tab and choose grep. A prefix arg will launch recursive
grep.

NOTE:You can now launch grep with (C-u) M-g s without switching to the
action pannel.

*** Grep thing at point

Before lauching helm, put your cursor on the start of symbol or sexp
you will want to grep. Then launch helm-do-grep or helm-find-files,
and when in the grep prompt hit C-w as many time as needed.

光标在一个word前面，然后 =helm-do-grep= ，选择grep的目录和文件 ，就可以grep这个word，按 =C-w=
可以跟着grep这个word后面的word。

*** Grep persistent action

As always, C-z will bring you in the buffer corresponding to the file
you are grepping. Well nothing new, but using C-u C-z will record this
place in the mark-ring. So if you want to come back later to these
places, there is no need to grep again, you will find all these places
in the mark-ring. Accessing the mark-ring in Emacs is really
inconvenient, fortunately, you will find in helm-config
helm-all-mark-ring which is a mark-ring browser
(helm-command-prefix-key C-c SPACE). helm-all-mark-ring is in helm
menu also, in the tool section.

TIP: Bind helm-all-mark-ring to C-c SPACE.

在org mode下，无效。
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c <SPC>") 'helm-all-mark-rings)
#+END_SRC

NOTE: helm-all-mark-ring handle global-mark-ring also.

* helm-swoop
[2014-11-21 周五 09:26:34]

#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :ensure t
  :defer t
  :bind (("M-i" . helm-swoop)
        ("M-I" . helm-swoop-back-to-last-point)
        ( "C-c M-i" . helm-multi-swoop)
        ( "C-x M-i" . helm-multi-swoop-all)))
#+END_SRC

* window-number

different from window-numbering.el
直接按 *M-num* 就ok，完了，用了这个都忘记怎么切窗口了， ^_^ *C-x o*, *C-x 1*

#+BEGIN_SRC emacs-lisp
(require 'window-numbering)

(window-numbering-mode 1)
#+END_SRC

* undotree

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :defer t
  :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))

(defalias 'redo 'undo-tree-redo)
;;(global-set-key (kbd "C-z") 'undo) ; 【Ctrl+z】
;;(global-set-key (kbd "C-S-z") 'redo) ; 【Ctrl+Shift+z】;  Mac style
;;(global-set-key (kbd "C-y") 'redo) ; 【Ctrl+y】; Microsoft Windows style
(global-set-key (kbd "C-r") 'redo) ; 【Ctrl+r】; VIM style
#+END_SRC

* python

pdb setup, note the python version
#+BEGIN_SRC emacs-lisp
(setq pdb-path 'c:/Python27/Lib/pdb.py
       gud-pdb-command-name (symbol-name pdb-path))
 (defadvice pdb (before gud-query-cmdline activate)
   "Provide a better default command line when called interactively."
   (interactive
    (list (gud-query-cmdline pdb-path
                 (file-name-nondirectory buffer-file-name)))))
#+end_src

* ace-jump [2014-11-20 周四 18:09:04]

#+BEGIN_SRC emacs-lisp
;;;
;;; ace jump mode major function
;;; 
;(autoload
;  'ace-jump-mode
;  "ace-jump-mode"
;  "Emacs quick move minor mode"
;  t)
;;; you can select the key you prefer to
;(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
;
;;; 
;;; enable a more powerful jump back function from ace jump mode
;;;
;(autoload
;  'ace-jump-mode-pop-mark
;  "ace-jump-mode"
;  "Ace jump back:-)"
;  t)
;(eval-after-load "ace-jump-mode"
;  '(ace-jump-mode-enable-mark-sync))
;(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
;
;;;If you use evil
;(define-key evil-normal-state-map (kbd "SPC") 'ace-jump-mode)
#+END_SRC 

* org mode
** html export
[2014-09-12 12:55:36] 为什么不管用呢？

#+BEGIN_SRC emacs-lisp
;(setq org-export-html-style-include-scripts nil
;   org-export-html-style-include-default nil
;   org-export-html-style-default nil
;   org-html-style-default nil)
 
;(setq org-export-html-style
;(setq org-html-head-include-default-style
(setq org-html-style-default
   "<link rel=\"stylesheet\" type=\"text/css\" href=\"css/org-manual.css\" />")
#+END_SRC

** 4.2 Org-Mode Setup

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))

;; Standard key bindings
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
(setq org-log-done t)
#+END_SRC

** 4.6 Key bindings

Custom Key Bindings

常用的列在前面。
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f12>") 'org-agenda)
(global-set-key (kbd "<f3>") 'bh/org-todo)
(global-set-key (kbd "<S-f3>") 'bh/widen)
(global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
(global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
(global-set-key (kbd "<f9> <f9>") 'bh/show-org-agenda)
(global-set-key (kbd "<f9> b") 'bbdb)
(global-set-key (kbd "<f9> c") 'calendar)
(global-set-key (kbd "<f9> f") 'boxquote-insert-file)
;;(global-set-key (kbd "<f9> g") 'gnus)
(global-set-key (kbd "<f9> h") 'bh/hide-other)
(global-set-key (kbd "<f9> n") 'bh/toggle-next-task-display)
(global-set-key (kbd "<f9> w") 'widen)

(global-set-key (kbd "<f9> I") 'bh/punch-in)
(global-set-key (kbd "<f9> O") 'bh/punch-out)

(global-set-key (kbd "<f9> o") 'bh/make-org-scratch)

(global-set-key (kbd "<f9> r") 'boxquote-region)
(global-set-key (kbd "<f9> s") 'bh/switch-to-scratch)

(global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
(global-set-key (kbd "<f9> T") 'bh/toggle-insert-inactive-timestamp)

(global-set-key (kbd "<f9> v") 'visible-mode)
(global-set-key (kbd "<f9> l") 'org-toggle-link-display)
(global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)
(global-set-key (kbd "C-<f9>") 'previous-buffer)
(global-set-key (kbd "M-<f9>") 'org-toggle-inline-images)
(global-set-key (kbd "C-x n r") 'narrow-to-region)
(global-set-key (kbd "C-<f10>") 'next-buffer)
(global-set-key (kbd "<f11>") 'org-clock-goto)
(global-set-key (kbd "C-<f11>") 'org-clock-in)
(global-set-key (kbd "C-s-<f12>") 'bh/save-then-publish)
(global-set-key (kbd "C-c c") 'org-capture)

(setq org-agenda-files (list "~/org")
	  )

'(org-refile-targets (quote (("newgtd.org" :maxlevel . 1) 
                              ("albert.org" :level . 2))))
#+END_SRC

** 6.1 Capture Templates

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")
(setq org-default-notes-file "~/org/refile.org")

(defun bh/hide-other ()
  (interactive)
  (save-excursion
    (org-back-to-heading 'invisible-ok)
    (hide-other)
    (org-cycle)
    (org-cycle)
    (org-cycle)))

(defun bh/set-truncate-lines ()
  "Toggle value of truncate-lines and refresh window display."
  (interactive)
  (setq truncate-lines (not truncate-lines))
  ;; now refresh window display (an idiom from simple.el):
  (save-excursion
    (set-window-start (selected-window)
                      (window-start (selected-window)))))

(defun bh/make-org-scratch ()
  (interactive)
  (find-file "/tmp/publish/scratch.org")
  (gnus-make-directory "/tmp/publish"))

(defun bh/switch-to-scratch ()
  (interactive)
  (switch-to-buffer "*scratch*"))

;; I use C-c c to start capture mode
(global-set-key (kbd "C-c c") 'org-capture)

;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/org/refile.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond" entry (file "~/org/refile.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note" entry (file "~/org/refile.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "~/org/diary.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file "~/org/refile.org")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("m" "Meeting" entry (file "~/org/refile.org")
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call" entry (file "~/org/refile.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "~/org/refile.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
#+END_SRC

** 7.1 Refile Setup

#+BEGIN_SRC emacs-lisp
; Targets include this file and any file contributing to the agenda - up to 9 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 2)
                                 (org-agenda-files :maxlevel . 2))))

; Use full outline paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path t)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

; Use IDO for both buffer and file completion and ido-everywhere to t
(setq org-completion-use-ido t)
(setq ido-everywhere t)
(setq ido-max-directory-size 100000)
(ido-mode (quote both))
; Use the current window when visiting files and buffers with ido
(setq ido-default-file-method 'selected-window)
(setq ido-default-buffer-method 'selected-window)
; Use the current window for indirect buffer display
(setq org-indirect-buffer-display 'current-window)

;;;; Refile settings
; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_SRC

** 8.1

#+BEGIN_SRC emacs-lisp
;; Do not dim blocked tasks
(setq org-agenda-dim-blocked-tasks nil)

;; Compact the block agenda view
(setq org-agenda-compact-blocks t)

;; Custom agenda command definitions
(setq org-agenda-custom-commands
      (quote (("N" "Notes" tags "NOTE"
               ((org-agenda-overriding-header "Notes")
                (org-tags-match-list-sublevels t)))
              ("h" "Habits" tags-todo "STYLE=\"habit\""
               ((org-agenda-overriding-header "Habits")
                (org-agenda-sorting-strategy
                 '(todo-state-down effort-up category-keep))))
              (" " "Agenda"
               ((agenda "" nil)
                (tags "REFILE"
                      ((org-agenda-overriding-header "Tasks to Refile")
                       (org-tags-match-list-sublevels nil)))
                (tags-todo "-CANCELLED/!"
                           ((org-agenda-overriding-header "Stuck Projects")
                            (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-HOLD-CANCELLED/!"
                           ((org-agenda-overriding-header "Projects")
                            (org-agenda-skip-function 'bh/skip-non-projects)
                            (org-tags-match-list-sublevels 'indented)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-CANCELLED/!NEXT"
                           ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                  (if bh/hide-scheduled-and-waiting-next-tasks
                                                                      ""
                                                                    " (including WAITING and SCHEDULED tasks)")))
                            (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                            (org-tags-match-list-sublevels t)
                            (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-sorting-strategy
                             '(todo-state-down effort-up category-keep))))
                (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                           ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                  (if bh/hide-scheduled-and-waiting-next-tasks
                                                                      ""
                                                                    " (including WAITING and SCHEDULED tasks)")))
                            (org-agenda-skip-function 'bh/skip-non-project-tasks)
                            (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                           ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                  (if bh/hide-scheduled-and-waiting-next-tasks
                                                                      ""
                                                                    " (including WAITING and SCHEDULED tasks)")))
                            (org-agenda-skip-function 'bh/skip-project-tasks)
                            (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                            (org-agenda-sorting-strategy
                             '(category-keep))))
                (tags-todo "-CANCELLED+WAITING|HOLD/!"
                           ((org-agenda-overriding-header "Waiting and Postponed Tasks")
                            (org-agenda-skip-function 'bh/skip-stuck-projects)
                            (org-tags-match-list-sublevels nil)
                            (org-agenda-todo-ignore-scheduled t)
                            (org-agenda-todo-ignore-deadlines t)))
                (tags "-REFILE/"
                      ((org-agenda-overriding-header "Tasks to Archive")
                       (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                       (org-tags-match-list-sublevels nil))))
               nil))))

;; Remove empty LOGBOOK drawers on clock out
(defun bh/remove-empty-drawer-on-clock-out ()
  (interactive)
  (save-excursion
    (beginning-of-line 0)
    (org-remove-empty-drawer-at (point))))

(add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)
#+END_SRC

** 9.1 Clock Setup

#+BEGIN_SRC emacs-lisp
;; Resume clocking task when emacs is restarted
(org-clock-persistence-insinuate)

;; Show lot of clocking history so it's easy to pick items off the C-F11 list
(setq org-clock-history-length 23)
;; Resume clocking task on clock-in if the clock is open
(setq org-clock-in-resume t)
;; Change tasks to NEXT when clocking in
(setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
;; Save clock data and state changes and notes in the LOGBOOK drawer
(setq org-clock-into-drawer t)
;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
(setq org-clock-out-remove-zero-time-clocks t)
;; Clock out when moving task to a done state
(setq org-clock-out-when-done t)
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)
;; Do not prompt to resume an active clock
(setq org-clock-persist-query-resume nil)
;; Enable auto clock resolution for finding open clocks
(setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)

(setq bh/keep-clock-running nil)

(defun bh/clock-in-to-next (kw)
  "Switch a task from TODO to NEXT when clocking in.
Skips capture tasks, projects, and subprojects.
Switch projects and subprojects from NEXT back to TODO"
  (when (not (and (boundp 'org-capture-mode) org-capture-mode))
    (cond
     ((and (member (org-get-todo-state) (list "TODO"))
           (bh/is-task-p))
      "NEXT")
     ((and (member (org-get-todo-state) (list "NEXT"))
           (bh/is-project-p))
      "TODO"))))

(defun bh/find-project-task ()
  "Move point to the parent (project) task if any"
  (save-restriction
    (widen)
    (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
      (while (org-up-heading-safe)
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq parent-task (point))))
      (goto-char parent-task)
      parent-task)))

(defun bh/punch-in (arg)
  "Start continuous clocking and set the default task to the
selected task.  If no task is selected set the Organization task
as the default task."
  (interactive "p")
  (setq bh/keep-clock-running t)
  (if (equal major-mode 'org-agenda-mode)
      ;;
      ;; We're in the agenda
      ;;
      (let* ((marker (org-get-at-bol 'org-hd-marker))
             (tags (org-with-point-at marker (org-get-tags-at))))
        (if (and (eq arg 4) tags)
            (org-agenda-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))
    ;;
    ;; We are not in the agenda
    ;;
    (save-restriction
      (widen)
      ; Find the tags on the current task
      (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
          (org-clock-in '(16))
        (bh/clock-in-organization-task-as-default)))))

(defun bh/punch-out ()
  (interactive)
  (setq bh/keep-clock-running nil)
  (when (org-clock-is-active)
    (org-clock-out))
  (org-agenda-remove-restriction-lock))

(defun bh/clock-in-default-task ()
  (save-excursion
    (org-with-point-at org-clock-default-task
      (org-clock-in))))

(defun bh/clock-in-parent-task ()
  "Move point to the parent (project) task if any and clock in"
  (let ((parent-task))
    (save-excursion
      (save-restriction
        (widen)
        (while (and (not parent-task) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (if parent-task
            (org-with-point-at parent-task
              (org-clock-in))
          (when bh/keep-clock-running
            (bh/clock-in-default-task)))))))

(defvar bh/organization-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f9")

(defun bh/clock-in-organization-task-as-default ()
  (interactive)
  (org-with-point-at (org-id-find bh/organization-task-id 'marker)
    (org-clock-in '(16))))

(defun bh/clock-out-maybe ()
  (when (and bh/keep-clock-running
             (not org-clock-clocking-in)
             (marker-buffer org-clock-default-task)
             (not org-clock-resolving-clocks-due-to-idleness))
    (bh/clock-in-parent-task)))

(add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)
#+END_SRC

** 10.2
*** 10.2.1 Creating a task estimate with column mode

#+BEGIN_SRC emacs-lisp
; Set default column view headings: Task Effort Clock_Summary
(setq org-columns-default-format "%80ITEM(Task) %10Effort(Effort){:} %10CLOCKSUM")

; global Effort estimate values
; global STYLE property values for completion
(setq org-global-properties (quote (("Effort_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 0:00")
                                    ("STYLE_ALL" . "habit"))))
#+END_SRC

** 10.3 Providing progress reports to others

#+BEGIN_SRC emacs-lisp
;; Agenda log mode items to display (closed and state changes by default)
(setq org-agenda-log-mode-items (quote (closed state)))
#+END_SRC

** 11.1 Tags

Tags with fast selection keys
#+BEGIN_SRC emacs-lisp
(setq org-tag-alist (quote ((:startgroup)
                            ("@errand" . ?e)
                            ("@office" . ?o)
                            ("@home" . ?H)
                            (:endgroup)
                            ("WAITING" . ?w)
                            ("HOLD" . ?h)
                            ("PERSONAL" . ?P)
                            ("WORK" . ?W)
                            ("ORG" . ?O)
                            ("ALBERT" . ?A)
                            ("NOTE" . ?n)
                            ("CANCELLED" . ?c)
                            ("FLAGGED" . ??))))

; Allow setting single tags without the menu
(setq org-fast-tag-selection-single-key (quote expert))

; For tag searches ignore tasks with scheduled and deadline dates
(setq org-agenda-tags-todo-honor-ignore-options t)
#+END_SRC

** 14.2 Project definition and finding stuck projects

#+BEGIN_SRC emacs-lisp
(setq org-stuck-projects (quote ("" nil nil "")))

(defun bh/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

(defun bh/is-project-subtree-p ()
  "Any task with a todo keyword that is in a project subtree.
Callers of this function already widen the buffer view."
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (bh/find-project-task)
      (if (equal (point) task)
          nil
        t))))

(defun bh/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))

(defun bh/is-subproject-p ()
  "Any task which is a subtask of another project"
  (let ((is-subproject)
        (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
    (save-excursion
      (while (and (not is-subproject) (org-up-heading-safe))
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq is-subproject t))))
    (and is-a-task is-subproject)))

(defun bh/list-sublevels-for-projects-indented ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels 'indented)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defun bh/list-sublevels-for-projects ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels t)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defvar bh/hide-scheduled-and-waiting-next-tasks t)

(defun bh/toggle-next-task-display ()
  (interactive)
  (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
  (when  (equal major-mode 'org-agenda-mode)
    (org-agenda-redo))
  (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

(defun bh/skip-stuck-projects ()
  "Skip trees that are not stuck projects"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                nil
              next-headline)) ; a stuck project, has subtasks but no next task
        nil))))

(defun bh/skip-non-stuck-projects ()
  "Skip trees that are not stuck projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                next-headline
              nil)) ; a stuck project, has subtasks but no next task
        next-headline))))

(defun bh/skip-non-projects ()
  "Skip trees that are not projects"
  ;; (bh/list-sublevels-for-projects-indented)
  (if (save-excursion (bh/skip-non-stuck-projects))
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((bh/is-project-p)
            nil)
           ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
            nil)
           (t
            subtree-end))))
    (save-excursion (org-end-of-subtree t))))

(defun bh/skip-project-trees-and-habits ()
  "Skip trees that are projects"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits-and-single-tasks ()
  "Skip trees that are projects, tasks that are habits, single non-project tasks"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((org-is-habit-p)
        next-headline)
       ((and bh/hide-scheduled-and-waiting-next-tasks
             (member "WAITING" (org-get-tags-at)))
        next-headline)
       ((bh/is-project-p)
        next-headline)
       ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
        next-headline)
       (t
        nil)))))

(defun bh/skip-project-tasks-maybe ()
  "Show tasks related to the current restriction.
When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
When not restricted, skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max))))
           (limit-to-project (marker-buffer org-agenda-restrict-begin)))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (not limit-to-project)
             (bh/is-project-subtree-p))
        subtree-end)
       ((and limit-to-project
             (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-project-tasks ()
  "Show non-project tasks.
Skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       ((bh/is-project-subtree-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-project-tasks ()
  "Show project tasks.
Skip project and sub-project tasks, habits, and loose non-project tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       ((not (bh/is-project-subtree-p))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits ()
  "Skip trees that are projects and tasks that are habits"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-subprojects ()
  "Skip trees that are not projects"
  (let ((next-headline (save-excursion (outline-next-heading))))
    (if (bh/is-subproject-p)
        nil
      next-headline)))
#+END_SRC

** 16.2 plantuml

#+BEGIN_SRC emacs-lisp
(setq org-plantuml-jar-path "~/java/plantuml.jar")

(add-hook 'org-babel-after-execute-hook 'bh/display-inline-images 'append)

; Make babel results blocks lowercase
(setq org-babel-results-keyword "results")

(defun bh/display-inline-images ()
  (condition-case nil
      (org-display-inline-images)
    (error nil)))

(org-babel-do-load-languages
 (quote org-babel-load-languages)
 (quote ((emacs-lisp . t)
         (dot . t)
         (ditaa . t)
         (R . t)
         (python . t)
         (ruby . t)
         (gnuplot . t)
         (clojure . t)
         (sh . t)
         (ledger . t)
         (org . t)
         (plantuml . t)
         (latex . t))))

; Do not prompt to confirm evaluation
; This may be dangerous - make sure you understand the consequences
; of setting this -- see the docstring for details
(setq org-confirm-babel-evaluate nil)

; Use fundamental mode when editing plantuml blocks with C-c '
(add-to-list 'org-src-lang-modes (quote ("plantuml" . fundamental)))
#+END_SRC

** 18
*** 18.2.1 Narrowing to a subtree with bh/org-todo

#+BEGIN_SRC emacs-lisp
;;(global-set-key (kbd "<f3>") 'bh/org-todo)

(defun bh/org-todo (arg)
  (interactive "p")
  (if (equal arg 4)
      (save-restriction
        (bh/narrow-to-org-subtree)
        (org-show-todo-tree nil))
    (bh/narrow-to-org-subtree)
    (org-show-todo-tree nil)))

;;(global-set-key (kbd "<S-f5>") 'bh/widen)

(defun bh/widen ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (progn
        (org-agenda-remove-restriction-lock)
        (when org-agenda-sticky
          (org-agenda-redo)))
    (widen)))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "W" (lambda () (interactive) (setq bh/hide-scheduled-and-waiting-next-tasks t) (bh/widen))))
          'append)

(defun bh/restrict-to-file-or-follow (arg)
  "Set agenda restriction to 'file or with argument invoke follow mode.
I don't use follow mode very often but I restrict to file all the time
so change the default 'F' binding in the agenda to allow both"
  (interactive "p")
  (if (equal arg 4)
      (org-agenda-follow-mode)
    (widen)
    (bh/set-agenda-restriction-lock 4)
    (org-agenda-redo)
    (beginning-of-buffer)))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "F" 'bh/restrict-to-file-or-follow))
          'append)

(defun bh/narrow-to-org-subtree ()
  (widen)
  (org-narrow-to-subtree)
  (save-restriction
    (org-agenda-set-restriction-lock)))

(defun bh/narrow-to-subtree ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (progn
        (org-with-point-at (org-get-at-bol 'org-hd-marker)
          (bh/narrow-to-org-subtree))
        (when org-agenda-sticky
          (org-agenda-redo)))
    (bh/narrow-to-org-subtree)))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "N" 'bh/narrow-to-subtree))
          'append)

(defun bh/narrow-up-one-org-level ()
  (widen)
  (save-excursion
    (outline-up-heading 1 'invisible-ok)
    (bh/narrow-to-org-subtree)))

(defun bh/get-pom-from-agenda-restriction-or-point ()
  (or (org-get-at-bol 'org-hd-marker)
      (and (marker-position org-agenda-restrict-begin) org-agenda-restrict-begin)
      (and (equal major-mode 'org-mode) (point))
      org-clock-marker))

(defun bh/narrow-up-one-level ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (org-with-point-at (bh/get-pom-from-agenda-restriction-or-point)
        (bh/narrow-up-one-org-level))
    (bh/narrow-up-one-org-level)))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "U" 'bh/narrow-up-one-level))
          'append)

(defun bh/narrow-to-org-project ()
  (widen)
  (save-excursion
    (bh/find-project-task)
    (bh/narrow-to-org-subtree)))

(defun bh/narrow-to-project ()
  (interactive)
  (if (equal major-mode 'org-agenda-mode)
      (progn
        (org-with-point-at (bh/get-pom-from-agenda-restriction-or-point)
          (bh/narrow-to-org-project)
          (save-excursion
            (bh/find-project-task)
            (org-agenda-set-restriction-lock)))
        (org-agenda-redo)
        (beginning-of-buffer))
    (bh/narrow-to-org-project)
    (save-restriction
      (org-agenda-set-restriction-lock))))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "P" 'bh/narrow-to-project))
          'append)

(defvar bh/project-list nil)

(defun bh/view-next-project ()
  (interactive)
  (let (num-project-left current-project)
    (unless (marker-position org-agenda-restrict-begin)
      (goto-char (point-min))
      ; Clear all of the existing markers on the list
      (while bh/project-list
        (set-marker (pop bh/project-list) nil))
      (re-search-forward "Tasks to Refile")
      (forward-visible-line 1))

    ; Build a new project marker list
    (unless bh/project-list
      (while (< (point) (point-max))
        (while (and (< (point) (point-max))
                    (or (not (org-get-at-bol 'org-hd-marker))
                        (org-with-point-at (org-get-at-bol 'org-hd-marker)
                          (or (not (bh/is-project-p))
                              (bh/is-project-subtree-p)))))
          (forward-visible-line 1))
        (when (< (point) (point-max))
          (add-to-list 'bh/project-list (copy-marker (org-get-at-bol 'org-hd-marker)) 'append))
        (forward-visible-line 1)))

    ; Pop off the first marker on the list and display
    (setq current-project (pop bh/project-list))
    (when current-project
      (org-with-point-at current-project
        (setq bh/hide-scheduled-and-waiting-next-tasks nil)
        (bh/narrow-to-project))
      ; Remove the marker
      (setq current-project nil)
      (org-agenda-redo)
      (beginning-of-buffer)
      (setq num-projects-left (length bh/project-list))
      (if (> num-projects-left 0)
          (message "%s projects left to view" num-projects-left)
        (beginning-of-buffer)
        (setq bh/hide-scheduled-and-waiting-next-tasks t)
        (error "All projects viewed.")))))

(add-hook 'org-agenda-mode-hook
          '(lambda () (org-defkey org-agenda-mode-map "V" 'bh/view-next-project))
          'append)

(setq org-show-entry-below (quote ((default))))
#+END_SRC

*** 18.3 Tuning the Agenda Views

Always hilight the current agenda line
#+BEGIN_SRC emacs-lisp
(add-hook 'org-agenda-mode-hook
          '(lambda () (hl-line-mode 1))
          'append)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; The following custom-set-faces create the highlights
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(org-mode-line-clock ((t (:background "grey75" :foreground "red" :box (:line-width -1 :style released-button)))) t))
#+END_SRC

**** 18.3.2 Keep tasks with timestamps visible on the global todo lists

#+BEGIN_SRC emacs-lisp
;; Keep tasks with dates on the global todo lists
(setq org-agenda-todo-ignore-with-date nil)

;; Keep tasks with deadlines on the global todo lists
(setq org-agenda-todo-ignore-deadlines nil)

;; Keep tasks with scheduled dates on the global todo lists
(setq org-agenda-todo-ignore-scheduled nil)

;; Keep tasks with timestamps on the global todo lists
(setq org-agenda-todo-ignore-timestamp nil)

;; Remove completed deadline tasks from the agenda view
(setq org-agenda-skip-deadline-if-done t)

;; Remove completed scheduled tasks from the agenda view
(setq org-agenda-skip-scheduled-if-done t)

;; Remove completed items from search results
(setq org-agenda-skip-timestamp-if-done t)
#+END_SRC

**** 18.3.4 Searches include archive files

#+BEGIN_SRC emacs-lisp
;; Include agenda archive files when searching for things
(setq org-agenda-text-search-extra-files (quote (agenda-archives)))
#+END_SRC

**** 18.3.5 Agenda view tweaks

#+BEGIN_SRC emacs-lisp
;; Show all future entries for repeating tasks
(setq org-agenda-repeating-timestamp-show-all t)

;; Show all agenda dates - even if they are empty
(setq org-agenda-show-all-dates t)

;; Sorting order for tasks on the agenda
(setq org-agenda-sorting-strategy
      (quote ((agenda habit-down time-up user-defined-up effort-up category-keep)
              (todo category-up effort-up)
              (tags category-up effort-up)
              (search category-up))))

;; Start the weekly agenda on Monday
(setq org-agenda-start-on-weekday 1)

;; Enable display of the time grid so we can see the marker for the current time
(setq org-agenda-time-grid (quote ((daily today remove-match)
                                   #("----------------" 0 16 (org-heading t))
                                   (0900 1100 1300 1500 1700))))

;; Display tags farther right
(setq org-agenda-tags-column -102)

;;
;; Agenda sorting functions
;;
(setq org-agenda-cmp-user-defined 'bh/agenda-sort)

(defun bh/agenda-sort (a b)
  "Sorting strategy for agenda items.
Late deadlines first, then scheduled, then non-late deadlines"
  (let (result num-a num-b)
    (cond
     ; time specific items are already sorted first by org-agenda-sorting-strategy

     ; non-deadline and non-scheduled items next
     ((bh/agenda-sort-test 'bh/is-not-scheduled-or-deadline a b))

     ; deadlines for today next
     ((bh/agenda-sort-test 'bh/is-due-deadline a b))

     ; late deadlines next
     ((bh/agenda-sort-test-num 'bh/is-late-deadline '> a b))

     ; scheduled items for today next
     ((bh/agenda-sort-test 'bh/is-scheduled-today a b))

     ; late scheduled items next
     ((bh/agenda-sort-test-num 'bh/is-scheduled-late '> a b))

     ; pending deadlines last
     ((bh/agenda-sort-test-num 'bh/is-pending-deadline '< a b))

     ; finally default to unsorted
     (t (setq result nil)))
    result))

(defmacro bh/agenda-sort-test (fn a b)
  "Test for agenda sort"
  `(cond
    ; if both match leave them unsorted
    ((and (apply ,fn (list ,a))
          (apply ,fn (list ,b)))
     (setq result nil))
    ; if a matches put a first
    ((apply ,fn (list ,a))
     (setq result -1))
    ; otherwise if b matches put b first
    ((apply ,fn (list ,b))
     (setq result 1))
    ; if none match leave them unsorted
    (t nil)))

(defmacro bh/agenda-sort-test-num (fn compfn a b)
  `(cond
    ((apply ,fn (list ,a))
     (setq num-a (string-to-number (match-string 1 ,a)))
     (if (apply ,fn (list ,b))
         (progn
           (setq num-b (string-to-number (match-string 1 ,b)))
           (setq result (if (apply ,compfn (list num-a num-b))
                            -1
                          1)))
       (setq result -1)))
    ((apply ,fn (list ,b))
     (setq result 1))
    (t nil)))

(defun bh/is-not-scheduled-or-deadline (date-str)
  (and (not (bh/is-deadline date-str))
       (not (bh/is-scheduled date-str))))

(defun bh/is-due-deadline (date-str)
  (string-match "Deadline:" date-str))

(defun bh/is-late-deadline (date-str)
  (string-match "\\([0-9]*\\) d\. ago:" date-str))

(defun bh/is-pending-deadline (date-str)
  (string-match "In \\([^-]*\\)d\.:" date-str))

(defun bh/is-deadline (date-str)
  (or (bh/is-due-deadline date-str)
      (bh/is-late-deadline date-str)
      (bh/is-pending-deadline date-str)))

(defun bh/is-scheduled (date-str)
  (or (bh/is-scheduled-today date-str)
      (bh/is-scheduled-late date-str)))

(defun bh/is-scheduled-today (date-str)
  (string-match "Scheduled:" date-str))

(defun bh/is-scheduled-late (date-str)
  (string-match "Sched\.\\(.*\\)x:" date-str))
#+END_SRC

**** 18.3.6 Sticky Agendas

#+BEGIN_SRC emacs-lisp
;; I normally have two views displayed (F12 a for the daily/weekly agenda and F12 SPC for my project management view) 

;; Use sticky agenda's so they persist
(setq org-agenda-sticky t)
#+END_SRC

**** 18.7.2 org-indent mode

#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC

**** 18.12 Logging Stuff

#+BEGIN_SRC emacs-lisp
(setq org-log-done (quote time))
(setq org-log-into-drawer t)
(setq org-log-state-notes-insert-after-drawers nil)

(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
#+END_SRC

*** 18.44 Showing source block syntax highlighting

#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t)
#+END_SRC

ediff org mode时的folding有点讨厌。

#+BEGIN_SRC emacs-lisp
;;2014/05/02 16:43:50 ediff folded org file
;;(add-hook 'ediff-prepare-buffer-hook 'f-ediff-prepare-buffer-hook-setup)
;;(defun f-ediff-prepare-buffer-hook-setup ()
;;  ;; specific modes
;;  (cond ((eq major-mode 'org-mode)
;;         (f-org-vis-mod-maximum))
;;        ;; room for more modes
;;        )
;;  ;; all modes
;;  (setq truncate-lines nil))
;;(defun f-org-vis-mod-maximum ()
;;  "Visibility: Show the most possible."
;;  (cond
;;   ((eq major-mode 'org-mode)
;;    (visible-mode 1)  ; default 0
;;    (setq truncate-lines nil)  ; no `org-startup-truncated' in hook
;;    (setq org-hide-leading-stars t))  ; default nil
;;   (t
;;    (message "ERR: not in Org mode")
;;    (ding))))
#+END_SRC

** org2blog

#+BEGIN_SRC emacs-lisp
;(add-to-list 'load-path "~/.emacs.d/lisp/org2blog")
;(require 'org2blog-autoloads)
;
;(setq org2blog/wp-blog-alist
;      '(("wordpress"
;         :url "http://www.albert.com/xmlrpc.php"
;         :username "admin"
;         :default-title "Hello World"
;         :default-categories ("org2blog" "emacs")
;         :tags-as-categories nil)
;                              ))
#+END_SRC
* scheme [2017-03-02 周四 21:27:47]

#+BEGIN_SRC emacs-lisp
  (require 'cmuscheme)
  (setq scheme-program-name "racket")         ;; 如果用 Petite 就改成 "petite"
  ;; (setq scheme-program-name "scheme")         ;; 如果用 Petite 就改成 "petite"


  ;; bypass the interactive question and start the default interpreter
  (defun scheme-proc ()
    "Return the current Scheme process, starting one if necessary."
    (unless (and scheme-buffer
		 (get-buffer scheme-buffer)
		 (comint-check-proc scheme-buffer))
      (save-window-excursion
	(run-scheme scheme-program-name)))
    (or (scheme-get-process)
	(error "No current process. See variable `scheme-buffer'")))


  (defun scheme-split-window ()
    (cond
     ((= 1 (count-windows))
      (delete-other-windows)
      ;; (split-window-vertically (floor (* 0.68 (window-height))))
      (split-window-horizontally (floor (* 0.60 (window-width))))
      (other-window 1)
      (switch-to-buffer "*scheme*")
      (other-window 1))
     ((not (cl-find "*scheme*"
		 (mapcar (lambda (w) (buffer-name (window-buffer w)))
			 (window-list))
		 :test 'equal))
      (other-window 1)
      (switch-to-buffer "*scheme*")
      (other-window -1))))


  (defun scheme-send-last-sexp-split-window ()
    (interactive)
    (scheme-split-window)
    (scheme-send-last-sexp))


  (defun scheme-send-definition-split-window ()
    (interactive)
    (scheme-split-window)
    (scheme-send-definition))

  (add-hook 'scheme-mode-hook
    (lambda ()
      (paredit-mode 1)
      (evil-paredit-mode 1)
      (define-key scheme-mode-map (kbd "<f6>") 'scheme-send-last-sexp-split-window)
      (define-key scheme-mode-map (kbd "<f7>") 'scheme-send-definition-split-window)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; [2017-04-09 周日 00:20:25]
(use-package paren-face
  :defer t
  :ensure t
  :init (global-paren-face-mode 1)
)
#+END_SRC
* web-mode [2018-02-08 周四 17:03:42]

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :defer t
)
#+END_SRC
* xah-find [2018-09-29 周六 22:09:48]

1. evil mode下按tab和enter都不能跳转到文件对应的地方，只能用鼠标，除非是emacs mode下。
2. 不知道是怎么找的扩展吗，如果打开一个 *.te的文件，默认扩展名就是 *.te，改改?

#+BEGIN_SRC emacs-lisp
(use-package xah-find
  :ensure t
  :defer t)
#+END_SRC

* 现在没用的配置
** 反显选中区域

emacs 23以后默认。
#+begin_src emacs-lisp
;(transient-mark-mode t) 
#+end_src
** Mode line format
[2014-09-16 18:18:58]

Display a more compact mode line.

#+BEGIN_SRC emacs-lisp
;(use-package smart-mode-line
;(defun my-line()
;  :init
;  (progn
;  (setq-default
;   mode-line-format 
;   '("%e"
;     mode-line-front-space
;     mode-line-mule-info
;     mode-line-client
;     mode-line-modified
;     mode-line-remote
;     mode-line-frame-identification
;     mode-line-buffer-identification
;     "   "
;     mode-line-position
;     (vc-mode vc-mode)
;     "  "
;     mode-line-modes
;     mode-line-misc-info
;     mode-line-end-spaces))))
;(my-line)
#+END_SRC
** ido

#+BEGIN_SRC emacs-lisp
;(require 'ido)
#+END_SRC

** smex
[2014-09-19 14:44:30] 有helm，不用smex了。

Smex is a M-x enhancement for Emacs. Built on top of IDO, it provides a convenient interface 
to your recently and most frequently used commands. And to all the other commands, too.

Extras: Limit commands to those relevant to the active major mode. Show frequently used commands that have no key bindings.

用了smex后，现在已经把command忘记得差不多了，现在magit的话，就会 *M-x magit* 直接联想了。呵呵。

#+BEGIN_SRC emacs-lisp
;(require 'smex)
;
;(global-set-key (kbd "M-x") 'smex)
;(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
;;(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC
