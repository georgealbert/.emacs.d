
* basic setting
** elpa
#+BEGIN_SRC emacs-lisp
;;; Albert.el -*- lexical-binding: t; -*-
#+END_SRC

#+BEGIN_SRC emacs-lisp
(run-with-idle-timer
 1 nil
 #'(lambda ()

(require 'package)
(add-to-list 'package-archives
  '("melpa" . "http://elpa.emacs-china.org/melpa/") t)
  ;; '("melpa" . "http://melpa.org/packages/") t)

;; (package-initialize)
;(setq package-user-dir (concat dotfiles-dir "/elpa"))
))

(setq use-package-always-ensure t)
(setq use-package-verbose t)
(require 'use-package)

(run-with-idle-timer
 1 nil
 #'(lambda ()
(use-package auto-compile
  :config (auto-compile-on-load-mode))
(setq load-prefer-newer t)
))
#+end_src

代理配置
;(setq url-proxy-services
;   '(("no_proxy" . "^\\(localhost\\|10.*\\)")
;     ("http" . "134.80.3.27:8080")
;     ("https" . "134.80.3.27:8080")))

** HOME
设置默认工作目录到HOME目录，不设置的话是 /emacs安装目录/bin/ 。

#+BEGIN_SRC emacs-lisp
(setq default-directory "~/")
#+END_SRC

** Window size

T430的屏幕长了一点，要是全屏的话，org mode的buffer会在右边打开，看见的内容太少了，
控制窗口大小，让buffer显示在下面。

#+BEGIN_SRC emacs-lisp
;; adjust the size of Emacs window for org mode agenda/todo list to display herizontal
(if (or (eq system-type 'x)
        (eq system-type 'windows-nt))
  ;; (setq default-frame-alist '((top . 0) (left . 0) (height . 42) (width . 159)))
  (toggle-frame-maximized)

  ;; "Maximize emacs window in windows os" WM_SYSCOMMAND #xf030 maximize  
  ;; [2018-09-07 周五 09:53:36] 不知道为什么没有效果
  ;; (interactive)
  ;; (w32-send-sys-command 61488)
)
#+END_SRC

** Font setting on win7

可以用 C-u C-x = or C-u g a 来看当前汉字是用什么字体显示的，从而决定应该在这个变量里加什么。
另一个有用的函数是 =describe-fontset=

中文用雅黑，英文用consolas比直接用雅黑的混合字体显示效果好。混合字体针对一个特定的字体大小。
#+BEGIN_SRC emacs-lisp
;; (create-fontset-from-fontset-spec
;;        "-misc-all_the_icons-medium-r-normal--*-*-*-*-*-*-fontset-alltheicons,
;;     iso10646-0:-misc-all-the-icons-medium-r-normal--*-*-*-*-*-iso10646-0")

 (if (eq window-system 'x)
   ;; (setq face-font-rescale-alist '(("微软雅黑" . 1.2) ("Microsoft Yahei" . 1.2)))
   (progn
     ;; "alltheicon"  U+e900 - U+e94f
     ;; (set-fontset-font "fontset-standard"
     ;; (set-fontset-font t

     ;; (set-fontset-font "fontset-default"
     ;;                  (cons (decode-char 'ucs #xe908)
     ;;                        (decode-char 'ucs #xe94f))
     ;;               "all-the-icons")
                   ;; "-outline-alltheicons-medium-r-normal--*-*-*-*-*-*-iso10646-0")
                   ;; "all-the-icons")

     ;; Setting English Font
     ;; (set-face-attribute 'default nil :font "Ubuntu Mono 12")
     ;; (set-face-attribute 'default nil :font "monaco")
     ;; (set-face-attribute 'default nil :font "Consolas 12")
     ;; (set-face-attribute 'default nil :font "consolas_with_yahei 10")

     ;; (set-set-font "fontset-standard" "wqy-unibit-mono")

     (set-face-attribute 'default nil :font "wqy-unibit-mono")
     ;; (set-face-attribute 'default nil :font "wenquanyi-unibit")
     ;; (set-face-attribute 'default nil :font "unibit")

     ;; [2019-12-19 Thu 11:15:27]
     ;; (set-face-attribute 'default nil :font "sarasa mono t sc 12")

     ;; (set-face-attribute 'default nil :font "unibit")

     ;; (set-face-attribute 'default nil :font "luxi mono 14")

     ;; for all-the-icons.el, emacs will coredump
     ;; (set-fontset-font t 'unicode (font-spec :family "all-the-icons") nil 'append)
     ;; (set-fontset-font t 'unicode (font-spec :family "Micosoft Yahei") nil 'append)
     ;; (set-fontset-font t 'gb2312 (font-spec :family "Micosoft Yahei") nil 'append)
     ;; (set-fontset-font t 'han (font-spec :family "Micosoft Yahei") nil 'append)
 
    ;; (set-fontset-font "fontset-default"
    ;;                   (cons (decode-char 'ucs #xf000)
    ;;                         (decode-char 'ucs #xf0ff))
    ;;                   "github-octicons")

     ;; Chinese Font
     (dolist (charset '(kana han symbol cjk-misc bopomofo))
             (set-fontset-font (frame-parameter nil 'font)
                           charset
                             (font-spec :family "unibit" :size 16)))))
                           ;;  (font-spec :family "wqy-unibit-mono" :size 16)))))
                           ;;  (font-spec :family "sarasa mono t sc" :size 14)))))
                           ;; (font-spec :family "consolas_with_yahei" :size 10)))))
                           ;; (font-spec :family "fangsong ti")))))
                           ;;  (font-spec :family "fangsong ti" :size 10)))))
                           ;; (font-spec :family "unibit" :size 16)))))
                           ;; (font-spec :family "Microsoft Yahei" :size 10)))))

(defun albert/set-font (english chinese english-size chinese-size)
  (set-face-attribute 'default nil :font
                      (format   "%s:pixelsize=%d"  english english-size))
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font) charset
                      (font-spec :family chinese :size chinese-size))))
                      
(defun qiang-make-font-string (font-name font-size)
  (if (and (stringp font-size)
           (equal ":" (string (elt font-size 0))))
      (format "%s%s" font-name font-size)
    (format "%s %s" font-name font-size)))

(defun qiang-set-font (english-fonts
                       english-font-size
                       chinese-fonts
                       &optional chinese-font-size)
  "english-font-size could be set to \":pixelsize=18\" or a integer.
If set/leave chinese-font-size to nil, it will follow english-font-size"
  (require 'cl) ; for find if
  (let ((en-font (qiang-make-font-string
                  (find-if #'qiang-font-existsp english-fonts)
                  english-font-size))
        (zh-font (font-spec :family (find-if #'qiang-font-existsp chinese-fonts)
                            :size chinese-font-size)))

    ;; Set the default English font
    ;;
    ;; The following 2 method cannot make the font settig work in new frames.
    ;; (set-default-font "Consolas:pixelsize=18")
    ;; (add-to-list 'default-frame-alist '(font . "Consolas:pixelsize=18"))
    ;; We have to use set-face-attribute
    (message "Set English Font to %s" en-font)
    (set-face-attribute 'default nil :font en-font)

    ;; Set Chinese font
    ;; Do not use 'unicode charset, it will cause the English font setting invalid
    (message "Set Chinese Font to %s" zh-font)
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil 'font)
                        charset zh-font))))
                        
(defun qiang-font-existsp (font)
  (if (null (x-list-fonts font))
      nil
    t))

(defun albert/set-font (english chinese english-size chinese-size)
  (set-face-attribute 'default nil :font
                      (format   "%s:pixelsize=%d"  english english-size))
  (dolist (charset '(kana han symbol cjk-misc bopomofo))
    (set-fontset-font (frame-parameter nil 'font) charset
                      (font-spec :family chinese :size chinese-size))))
                      
(defun qiang-make-font-string (font-name font-size)
  (if (and (stringp font-size)
           (equal ":" (string (elt font-size 0))))
      (format "%s%s" font-name font-size)
    (format "%s %s" font-name font-size)))

(defun qiang-set-font (english-fonts
                       english-font-size
                       chinese-fonts
                       &optional chinese-font-size)
  "english-font-size could be set to \":pixelsize=18\" or a integer.
If set/leave chinese-font-size to nil, it will follow english-font-size"
  (require 'cl) ; for find if
  (let ((en-font (qiang-make-font-string
                  (find-if #'qiang-font-existsp english-fonts)
                  english-font-size))
        (zh-font (font-spec :family (find-if #'qiang-font-existsp chinese-fonts)
                            :size chinese-font-size)))

    ;; Set the default English font
    ;;
    ;; The following 2 method cannot make the font settig work in new frames.
    ;; (set-default-font "Consolas:pixelsize=18")
    ;; (add-to-list 'default-frame-alist '(font . "Consolas:pixelsize=18"))
    ;; We have to use set-face-attribute
    (message "Set English Font to %s" en-font)
    (set-face-attribute 'default nil :font en-font)

    ;; Set Chinese font
    ;; Do not use 'unicode charset, it will cause the English font setting invalid
    (message "Set Chinese Font to %s" zh-font)
    (dolist (charset '(kana han symbol cjk-misc bopomofo))
      (set-fontset-font (frame-parameter nil 'font)
                        charset zh-font))))
                        
(defun qiang-font-existsp (font)
  (if (null (x-list-fonts font))
      nil
    t))

;; (qiang-set-font
;;  '("Consolas_with_Yahei" "unibit" "wqy" "wqy-unibit-mono" "DejaVu Sans Mono" "Monospace" "Ubuntu Mono" "Courier New") ":pixelsize=16"
;;  '("Consolas_with_Yahei" "unibit" "文泉驿等宽微米黑" "wqy-unibit-mono" "黑体" "Microsoft Yahei" "新宋体" "宋体"))
                      
;; (albert/set-font "unibit" "unibit" 16 16)

(defun albert-notebook-font()
  "Config font on HP zhan66."
  (interactive)
  (if (eq system-type 'windows-nt)
    (progn
      ;; Setting English Font
      (set-face-attribute 'default nil :font "Ubuntu Mono 11")
      ;; Chinese Font
      (dolist (charset '(kana han symbol cjk-misc bopomofo))
              (set-fontset-font (frame-parameter nil 'font)
                            charset
                            (font-spec :family "Microsoft Yahei" :size 22))))))

(defun albert-s2319-font()
  "Config font on dell s2319. 
   Ubuntu Mono 10 + Yahei 14 太小了
   Ubuntu Mono 12 + Yahei 16 比较合适
   "
  (interactive)
  (if (eq system-type 'windows-nt)
    (progn
      ;; Setting English Font
      (set-face-attribute 'default nil :font "Ubuntu Mono 12")
      ;; Chinese Font
      (dolist (charset '(kana han symbol cjk-misc bopomofo))
              (set-fontset-font (frame-parameter nil 'font)
                            charset
                            (font-spec :family "Microsoft Yahei" :size 16))))))

(if (eq system-type 'windows-nt)
  (progn
  ;; 根据显示器实际宽度(以毫米为单位)，显示字体.
    ;; s2319的宽度是509mm X 286mm
    (if (>= (display-mm-width) 509)
      (albert-s2319-font))
    
    ;; 根据显示器实际宽度(以毫米为单位)，显示字体.
    ;; 宽度在500mm的认为是笔记本?或者更加精确一点的方式来匹配不同的笔记本型号?
    ;; HP ZHAN66 309mm X 175mm
    ;; Thinkpad T430 4xxmm X 20xmm?
    (if (<= (display-mm-width) 500)
      (albert-notebook-font))))

;; [2018-12-10 周一 11:30:55] 测试了https://github.com/crvdgc/Consolas-with-Yahei
;; 效果不好。
;; (set-default-font "Consolas-with-Yahei 9")

;; (if (eq system-type 'windows-nt)
;;      (set-face-attribute
;;        'default nil :font "Consolas-with-Yahei 11"))
#+END_SRC

[2018-12-10 周一 11:39:52] Consolas 10 + Microsoft Yahei 24 org mode table是可以对齐的，但是中文太大了。
Consolas 8 + Microsoft Yahei 20 org mode table是可以对齐的，但是英文太小了。
默认用Consolas 11 + Microsoft Yahei 20的时候不能对齐。

Source Code Variable 无法和Yahei配合对齐。

[2018-12-10 周一 12:17:01] https://github.com/cstrap/monaco-font 
字体下载 https://raw.githubusercontent.com/todylu/monaco.ttf/master/monaco.ttf
"Monaco 8 + Microsoft Yahei 20" org mode table是可以对齐的，但是英文太小了。
"Monaco 10 + Microsoft Yahei 24" org mode table是可以对齐的，但是中文太大了。

[2018-12-10 周一 13:30:29] https://design.ubuntu.com/font/
"Ubuntu Mono 10 + Microsoft Yahei 20" org mode table是可以对齐的，但是英文太小了。
"Ubuntu Mono 12 + Microsoft Yahei 24" org mode table是可以对齐的，但是中文太大了。
"Ubuntu Mono 11 + Microsoft Yahei 22" org mode table是可以对齐的，字体大小正好。

** Performace problem

[2014-09-12 09:34:00] 就算这样有时候会很卡，xp下就好多了，怀疑和win7/域用户有关。
如果打开会看见很多QueryBasicInformation这样的调用.

#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
    (setq w32-get-true-file-attributes nil))
#+END_SRC

** UTF-8编码
[2014-09-17 14:59:51]

文件名在emacs使用utf-8的默认编码的时候是乱码，win下指定编码为gbk。
#+BEGIN_SRC emacs-lisp
(prefer-coding-system 'utf-8)

;; (setq current-language-environment "UTF-8")
;; (setq default-input-method "chinese-py")
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)

(if (eq system-type 'windows-nt)
  (progn
    (setq file-name-coding-system 'gbk)))
#+END_SRC

* evil

#+BEGIN_SRC emacs-lisp
(run-with-idle-timer
 1 nil
 #'(lambda ()

;; [2018-12-28 Fri 14:48:49] tab will work on linux term
(setq evil-want-C-i-jump nil)
(use-package evil
  :ensure t
  :defer t
  :init (evil-mode 1)
  :config 
    (progn
      (setq evil-want-visual-char-semi-exclusive t))
      ;; (define-key evil-insert-state-map (kbd "S-<insert>") 'clipboard-yank)
      (eval-after-load 'ggtags
        '(progn
           (evil-make-overriding-map ggtags-mode-map 'normal)
           ;; force update evil keymaps after ggtags-mode loaded
           (add-hook 'ggtags-mode-hook #'evil-normalize-keymaps))))

(when evil-want-C-i-jump
  (define-key evil-motion-state-map (kbd "C-i") 'evil-jump-forward))
))
#+end_src

* helm
[2014-09-16 09:27:15]

;; (require 'helm-config)

#+BEGIN_SRC emacs-lisp
(use-package helm
  :diminish helm-mode
  :ensure t
  :defer t
  :init
  (progn
    ;; (use-package helm-config)
    (helm-mode 1)))
;; (global-set-key (kbd "C-c h") 'helm-mini)
(global-set-key (kbd "C-c m") 'helm-mini)
(global-set-key (kbd "C-c n") 'helm-mini)
(global-set-key (kbd "M-x") 'helm-M-x)
;; (global-set-key (kbd "C-c a") 'helm-apropos)
(global-set-key (kbd "C-x C-f") 'helm-find-files)

(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z

;setq helm-idle-delay 0.0 ; update fast sources immediately (doesn't).
;          helm-input-idle-delay 0.01  ; this actually updates things
;                                      ; reeeelatively quickly.
(setq helm-quick-update t
      helm-M-x-requires-pattern nil ; 在M-x时默认就不显示多余的pattern了，看着烦
      helm-ff-skip-boring-files t)
#+END_SRC

** Search buffers by major-mode

+ multi buffer search
  1. *C-c h* 调出helm-mini buffer
  1. 在pattern: 中 输入 *org 选择buffer中的file，可以匹配多个文件
  1. *Esc m* 或者 *M-SPC* mark刚才匹配的files，会高亮
  1. 按 *C-s* search file content
  1. *C-j* 打开buffer并跳到选择的行
  1. *enter* 打开文件

+ M-SPC/Esc-SPC/C-@ :: 用 *M-SPC* 最方便了，mark当前的buffer，如果已经mark了会取消，先C-n/C-p移动到要取消的file

+ M-u :: 取消全部mark的buffer
+ M-a :: mark全部的buffer
     
[2014-09-16 18:24:22] multi search也可以这样，如在所有buffer中org-mode的buffer，然后找 *org @string_to_find 按 *C-s* 就ok了。

+ C-n/C-p/up/down :: 在helm的选项中上下移动
+ left/right :: 在source间移动， *C-o* 移动到下一个source，source就是group分类，如buffer，最近访问的buffer，创建buffer。
+ M-p/M-n :: 命令历史
             
+ mini buffer
  + M-S-d :: kill buffer and quit，就是 *M-D* 。
  + C-c d :: kill buffer without quitting
             
[2014-09-17 15:06:59] 为什么用了heml以后连dired+的 *R* rename file都变成helm的了？

[2014-10-13 周一 17:51:09] helm mini中，选择buffer后，按 =F9= 可以查找，这个更加方便。

** grep

=helm-resume= 恢复上次的command

*** Grep from helm-find-files

From helm-find-files (helm-command-prefix-key C-x C-f) Open the action
menu with tab and choose grep. A prefix arg will launch recursive
grep.

NOTE:You can now launch grep with (C-u) M-g s without switching to the
action pannel.

*** Grep thing at point

Before lauching helm, put your cursor on the start of symbol or sexp
you will want to grep. Then launch helm-do-grep or helm-find-files,
and when in the grep prompt hit C-w as many time as needed.

光标在一个word前面，然后 =helm-do-grep= ，选择grep的目录和文件 ，就可以grep这个word，按 =C-w=
可以跟着grep这个word后面的word。

*** Grep persistent action

As always, C-z will bring you in the buffer corresponding to the file
you are grepping. Well nothing new, but using C-u C-z will record this
place in the mark-ring. So if you want to come back later to these
places, there is no need to grep again, you will find all these places
in the mark-ring. Accessing the mark-ring in Emacs is really
inconvenient, fortunately, you will find in helm-config
helm-all-mark-ring which is a mark-ring browser
(helm-command-prefix-key C-c SPACE). helm-all-mark-ring is in helm
menu also, in the tool section.

TIP: Bind helm-all-mark-ring to C-c SPACE.

在org mode下，无效。
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c <SPC>") 'helm-all-mark-rings)
#+END_SRC

NOTE: helm-all-mark-ring handle global-mark-ring also.

** helm-swoop
[2014-11-21 周五 09:26:34]

#+BEGIN_SRC emacs-lisp
(use-package helm-swoop
  :ensure t
  :defer t
  :bind (("M-i" . helm-swoop)
        ("M-I" . helm-swoop-back-to-last-point)
        ( "C-c M-i" . helm-multi-swoop)
        ( "C-x M-i" . helm-multi-swoop-all)))
#+END_SRC

* ggtags

#+BEGIN_SRC emacs-lisp
(use-package ggtags
  :defer t
  :ensure t)

(add-hook 'c-mode-common-hook
  (lambda ()
    (when (derived-mode-p 'c-mode 'c++-mode 'java-mode 'asm-mode)
      (progn
        ;; (linum-mode 1)
        (flycheck-mode 1)
        (ggtags-mode 1)))))
#+END_SRC

* window-number

different from window-numbering.el
直接按 *M-num* 就ok，完了，用了这个都忘记怎么切窗口了， ^_^ *C-x o*, *C-x 1*

#+BEGIN_SRC lisp
(use-package window-numbering
  :ensure t
  :defer t
  :init (window-numbering-mode 1))
#+END_SRC

* winum [2019-06-12 周三 09:50:41]
从treemacs学到的。winum是window-number.el的新的扩展和活跃的维护版本。

#+BEGIN_SRC emacs-lisp
(run-with-idle-timer
 1 nil
 #'(lambda ()

(use-package winum
  :config (winum-mode +1)
  :init
  (setq winum-keymap
      (let ((map (make-sparse-keymap)))
        (define-key map (kbd "C-`") 'winum-select-window-by-number)
        (define-key map (kbd "C-²") 'winum-select-window-by-number)
        (define-key map (kbd "M-0") 'winum-select-window-0-or-10)
        (define-key map (kbd "M-1") 'winum-select-window-1)
        (define-key map (kbd "M-2") 'winum-select-window-2)
        (define-key map (kbd "M-3") 'winum-select-window-3)
        (define-key map (kbd "M-4") 'winum-select-window-4)
        (define-key map (kbd "M-5") 'winum-select-window-5)
        (define-key map (kbd "M-6") 'winum-select-window-6)
        (define-key map (kbd "M-7") 'winum-select-window-7)
        (define-key map (kbd "M-8") 'winum-select-window-8)
        map)))
        ))
#+END_SRC

* undotree

#+BEGIN_SRC emacs-lisp
(run-with-idle-timer
 1 nil
 #'(lambda ()

(use-package undo-tree
  :ensure t
  :defer t
  :config
    (progn
      (global-undo-tree-mode)
      (setq undo-tree-visualizer-timestamps t)
      (setq undo-tree-visualizer-diff t)))

(defalias 'redo 'undo-tree-redo)
;;(global-set-key (kbd "C-z") 'undo) ; 【Ctrl+z】
;;(global-set-key (kbd "C-S-z") 'redo) ; 【Ctrl+Shift+z】;  Mac style
;;(global-set-key (kbd "C-y") 'redo) ; 【Ctrl+y】; Microsoft Windows style
(global-set-key (kbd "C-r") 'redo) ; 【Ctrl+r】; VIM style

))
#+END_SRC

* python

pdb setup, note the python version
#+BEGIN_SRC lisp
;; (setq pdb-path 'c:/Python/Python36/Lib/pdb.py
;;        gud-pdb-command-name (symbol-name pdb-path))
;;  (defadvice pdb (before gud-query-cmdline activate)
;;    "Provide a better default command line when called interactively."
;;    (interactive
;;     (list (gud-query-cmdline pdb-path
;;                  (file-name-nondirectory buffer-file-name)))))
#+end_src

#+BEGIN_SRC emacs-lisp
;; (add-hook 'after-init-hook #'global-flycheck-mode);
#+end_src

#+BEGIN_SRC emacs-lisp
(use-package py-autopep8
  :ensure t
  :defer t
  :init
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
#+END_SRC

[2018-11-29 周四 16:15:34]
#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "ipython"
;; (setq python-shell-interpreter "python"
      python-shell-interpreter-args "-i --simple-prompt")

;; (use-package python-mode
;;   :mode (("SConstruct\\'" . python-mode)
;;          ("SConscript\\'" . python-mode)
;;          ("\\.py\\'"      . python-mode))
;;   :defer t
;;   ;; [2018-12-01 周六 22:13:10] 为什么execl-test.py不能显示中文doc，而且不停报错?
;;   ;; :init (elpy-enable)
;;   ;; :config
;; )
#+END_SRC

#+BEGIN_SRC lisp
(use-package elpy
  :ensure t
  :defer t
  :init
  (progn
    (advice-add 'python-mode :before 'elpy-enable))
  :config
  (progn
    ;; (advice-add 'python-mode :before 'elpy-enable)
    ;;(setq elpy-rpc-python-command "python3")
    ;; (elpy-use-ipython)
    ;; (add-hook 'elpy-mode-hook (lambda () (elpy-shell-toggle-dedicated-shell 1)))
    ;; use flycheck not flymake with elpy
    (when (require 'flycheck nil t)
      (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
      (add-hook 'elpy-mode-hook 'flycheck-mode))))
    ;; ))

;; (use-package flycheck
;;   :ensure t
;;   :defer t
;;   :init
;;     (when (require 'flycheck nil t)
;;       (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
;;       (add-hook 'elpy-mode-hook 'flycheck-mode)))

;; (elpy-enable)

#+END_SRC

* flycheck [2019-06-10 Mon 15:07:51]
#+BEGIN_SRC emacs-lisp
;; tools/flycheck/autoload.el
(defun +flycheck|init-popups ()
  "Activate `flycheck-posframe-mode' if available and in GUI Emacs.
Activate `flycheck-popup-tip-mode' otherwise.
Do nothing if `lsp-ui-mode' is active and `lsp-ui-sideline-enable' is non-nil."
  (unless (and (bound-and-true-p lsp-ui-mode)
               lsp-ui-sideline-enable)
    (if (and (fboundp 'flycheck-posframe-mode)
             (display-graphic-p))
        (flycheck-posframe-mode +1)
      (flycheck-popup-tip-mode +1))))

(use-package flycheck-posframe
  ;; :when (and EMACS26+ (featurep! +childframe))
  :defer t
  :init (add-hook 'flycheck-mode-hook #'+flycheck|init-popups)
  :config
  (setq flycheck-posframe-warning-prefix "☎ "
        flycheck-posframe-info-prefix "··· "
        flycheck-posframe-error-prefix "✕ "))
#+END_SRC

* lsp-mode [2019-06-12 Wed 11:14:11] 
Language Server Protocol (LSP) configurations.

lsp and pyls is too slow to use.

请参考 https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-lsp.el 和 
https://github.com/seagle0128/.emacs.d/blob/master/lisp/init-python.el 

如果不是 git 项目，最新的 lsp-mode 需要你手工在 python 文件目录下创建一个.projectile 文件，或者在 init-lsp.el 中打开我注释的代码。

#+BEGIN_SRC emacs-lisp
;; (use-package eglot
;;   :hook (prog-mode . eglot-ensure))

;; Emacs client for the Language Server Protocol
;; https://github.com/emacs-lsp/lsp-mode#supported-languages
(use-package lsp-mode
  ;; :diminish lsp-mode
  :defer t
  ;; :ensure company-jedi
  :hook (python-mode . lsp-deferred)
        (go-mode . lsp-deferred)
      ;; (python-mode . (lambda ()
	;; 		   (lsp)
	;; 		   ;; (setq-local company-backends '(company-jedi company-files))
	;; 		   ))
  :bind (:map lsp-mode-map
              ("C-c C-d" . lsp-describe-thing-at-point))
  :init
  (setq lsp-auto-guess-root t)       ; Detect project root
  (setq lsp-prefer-flymake nil)      ; Use lsp-ui and flycheck
  (setq flymake-fringe-indicator-position 'right-fringe))
;;   :config
;;   ;; Configure LSP clients
;;   (use-package lsp-clients
;;     :defer t
;;     :ensure nil
;;     :init
;;     (setq lsp-clients-python-library-directories '("/usr/local/" "/usr/"))))

(use-package lsp-ui
  :defer t
  :custom-face
  (lsp-ui-doc-background ((t (:background nil))))
  :bind (:map lsp-ui-mode-map
              ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
              ([remap xref-find-references] . lsp-ui-peek-find-references)
              ("C-c u" . lsp-ui-imenu))
  :init (setq ;; lsp-ui-doc-enable nil
              lsp-ui-doc-enable t
              lsp-ui-doc-use-webkit nil
              ;; lsp-ui-doc-use-webkit t
              lsp-ui-doc-include-signature t
              lsp-ui-doc-position 'top
              lsp-ui-doc-border (face-foreground 'default)

              lsp-enable-snippet nil
              lsp-ui-sideline-enable nil

              ;; emacs26.2经常陷入卡顿, set it to nil.
              ;; emacs 27.0.50 will be ok to support native json
              lsp-use-native-json t
              lsp-json-use-lists t

              lsp-ui-sideline-ignore-duplicate t)
  :config
  ;; WORKAROUND Hide mode-line of the lsp-ui-imenu buffer
  ;; https://github.com/emacs-lsp/lsp-ui/issues/243
  (defadvice lsp-ui-imenu (after hide-lsp-ui-imenu-mode-line activate)
    (setq mode-line-format nil)))

(use-package company-lsp
  :defer t
  :init (setq company-lsp-cache-candidates 'auto))

;; Debug
(use-package dap-mode
  :after lsp-mode
  :defer t
  :diminish
  :hook ((after-init . dap-mode)
         (dap-mode . dap-ui-mode)

         ;; (go-mode . (lambda () (require 'dap-go)))
         ;; (java-mode . (lambda () (require 'dap-java)))
         ;; ((c-mode c++-mode objc-mode swift) . (lambda () (require 'dap-lldb)))
         ;; (php-mode . (lambda () (require 'dap-php)))
         (python-mode . (lambda () (require 'dap-python)))))

;; `lsp-mode' and `treemacs' integration.
;; (when emacs/>=25.2p
  (use-package lsp-treemacs
    :defer t
    :bind (:map lsp-mode-map
                ("M-9" . lsp-treemacs-errors-list)))
;; )

;; ;; C/C++/Objective-C support
;; (use-package ccls
;;   :defines projectile-project-root-files-top-down-recurring
;;   :hook ((c-mode c++-mode objc-mode cuda-mode) . (lambda ()
;;                                                    (require 'ccls)
;;                                                    (lsp)))
;;   :config
;;   (with-eval-after-load 'projectile
;;     (setq projectile-project-root-files-top-down-recurring
;;           (append '("compile_commands.json"
;;                     ".ccls")
;;                   projectile-project-root-files-top-down-recurring))))

;; ;; Java support
;; (use-package lsp-java
;;   :hook (java-mode . (lambda ()
;;                        (require 'lsp-java)
;;                        (lsp))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package lsp-python-ms
  :ensure t
  :demand
  :after lsp-mode
  :hook (python-mode . lsp)
  :config
  ;; for dev build of language server
  (setq lsp-python-ms-dir
        (expand-file-name "~/mspyls/python-language-server/output/bin/Release/"))
  ;; for executable of language server, if it's not symlinked on your PATH
  (setq lsp-python-ms-executable
        "/home/albert/mspyls/python-language-server/output/bin/Release/Microsoft.Python.LanguageServer.LanguageServer"))
#+END_SRC

* basic setting - 可以推迟启动的
** 去掉启动欢迎界面

#+begin_src emacs-lisp
(setq inhibit-startup-message t) 
#+end_src

** 不要总是没完没了的问yes or no

#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src

** 不显示工具栏和滚动条
[2014-11-18 周二 17:39:59] 把scrollbar也去掉了

#+begin_src emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(if (or (eq window-system 'x) (eq window-system 'w32))
  (scroll-bar-mode -1))
#+end_src

** 光标靠近鼠标的时候，让鼠标自动让开，别挡住视线

#+begin_src emacs-lisp
(mouse-avoidance-mode 'animate)
#+end_src

** Frame title

#+begin_src emacs-lisp
(setq frame-title-format "Albert@%f")
#+end_src

;;(setq frame-title-format "Albert@%b")
** minibuffer
[2014-09-12 09:24:17]

It often displays so much information, even temporarily, that it is nice to give
it some room to breath.

#+BEGIN_SRC emacs-lisp
(setq resize-mini-windows t)
(setq max-mini-window-height 0.33)
#+END_SRC

** Backups
[2014-09-12 09:32:53]

This is one of the things people usually want to change right away. By default, 
Emacs saves backup files in the current directory. These are the files ending in ~ that are cluttering up your directory lists. 
The following code stashes them all in ~/.emacs.d/backups, where I can find them with C-x C-f (find-file) if I really need to.

#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist '(("." . "~/.emacs.d/backup")))

;; 自动存盘
(setq auto-save-mode t) 
#+END_SRC

Disk space is cheap. Save lots.
#+BEGIN_SRC emacs-lisp
(setq delete-old-versions -1)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/auto-save-list/" t)))
#+END_SRC

** Color theme

emacs24自带的最喜欢的theme。

[2017-04-30 周日 23:55:59] 试了一下solarized，在light mode下不好看，太晃眼，helm不知道选中了哪个，dark mode也一样，org mode中代码的高亮没有了。deeper-blue更好。
#+BEGIN_SRC emacs-lisp
;; (load-theme 'deeper-blue t)

;; (load-theme 'tango-dark t)
;; (load-theme 'manoj-dark t)
#+END_SRC

;; (load-theme 'solarized t)
;; (load-theme 'tango-dark t)
;; (load-theme 'manoj-dark t)

*** doom-themes [2019-05-21 周二 09:19:44]
昨天看了doom-emacs，觉得theme和modeline很漂亮，就试了一下。但是所有的theme的org block都是加亮的，
和现在使用的deeper-blue差异太大，就自己增加了一个theme。

#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  ;;:disabled t
  ;; :defer 1
  ;; :init
  :config
  (progn
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold nil  ; if nil, bold is universally disabled
                                       ; 禁用粗体，否则org-mode的outline字体太难看
          doom-themes-enable-italic t) ; if nil, italics is universally disabled

    ;; 在load-theme之前设置，让modeline更亮一点，
    ;; [2019-05-21 周二 16:54:51] 不知道改了doom-deeper-blue-theme.el的哪个地方，貌似modeline中的文件名能看清楚了。
    (setq doom-deeper-blue-brighter-modeline nil)

    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme may have their own settings.
    ;; (load-theme 'doom-one t)
    (load-theme 'doom-deeper-blue t)
    
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    ;; (doom-themes-neotree-config)
    ;; or for treemacs users
    (doom-themes-treemacs-config)
    
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)))
#+END_SRC

** Diredplus

[2014-09-11 10:47:57] 昨天刚开始用的，五颜六色的比较好看。

[2014-11-18 周二 10:54:56] 为什么在24.4上就不显示时间戳和权限了呢？

set =diredp-hide-details-initially-flag= to nil in 24.4 to display details, set
before dired+ loaded

也可以按 =(= 打开或关闭detail显示。

#+BEGIN_SRC emacs-lisp
(setq diredp-hide-details-initially-flag nil)
(use-package dired+
  :ensure nil
  :defer t)
#+END_SRC

** dired-k from doom-emacs [2019-06-10 Mon 11:09:35]
#+BEGIN_SRC emacs-lisp
(use-package dired-k
  ;; :unless (featurep! +ranger)
  :defer t
  :hook (dired-initial-position . dired-k)
  :hook (dired-after-readin . dired-k-no-revert)
  :config
  (defun +dired*interrupt-process (orig-fn &rest args)
    "Fixes dired-k killing git processes too abruptly, leaving behind disruptive
.git/index.lock files."
    (cl-letf (((symbol-function #'kill-process)
               (symbol-function #'interrupt-process)))
      (apply orig-fn args)))
  (advice-add #'dired-k--start-git-status :around #'+dired*interrupt-process)

  (defun +dired*dired-k-highlight (orig-fn &rest args)
    "Butt out if the requested directory is remote (i.e. through tramp)."
    (unless (file-remote-p default-directory)
      (apply orig-fn args)))
  (advice-add #'dired-k--highlight :around #'+dired*dired-k-highlight))
#+END_SRC

** 多行代码的注释/反注释

其实可以考虑vim的 =<leader> + \= 进行注释的。
#+BEGIN_SRC emacs-lisp
(if (eq system-type 'windows-nt)
  (global-set-key [?\C-c ?\C-/] 'comment-or-uncomment-region))

(if (eq system-type 'gnu/linux)
  (global-set-key [?\C-c ?\C-_] 'comment-or-uncomment-region))

;; for x11 [2019-01-30 Wed 12:34:48]
(if (eq window-system 'x)
  (global-set-key [?\C-c ?\C-/] 'comment-or-uncomment-region))

(defun albert|comment-or-uncomment-region (beg end &optional arg)
  (interactive (if (use-region-p)
                   (list (region-beginning) (region-end) nil)
                   (list (line-beginning-position)
                       (line-beginning-position 2))))
  (comment-or-uncomment-region beg end arg))

(global-set-key [remap comment-or-uncomment-region] 'albert|comment-or-uncomment-region)
#+END_SRC

** ibuffer

使用emacs时经常需要管理多个buffer， =/C-x C-b/= 的默认界面太过简陋。emacs事实上已
经提供了更好的buffer管理界面ibuffer，在配置文件中选用即可。

启用ibuffer支持，增强 *buffer*, 用了helm，ibuffer可以退休了。  
#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :defer t
  :config (global-set-key (kbd "C-x C-b") 'ibuffer))
#+END_SRC

** 字体放大缩小

from sacha chua
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+END_SRC

** 显示匹配的括号

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

** 显示行、列号

在status bar显示，不在buffer的左侧显示每行的行号，否则真的会很慢。

列号是从0开始的。
#+BEGIN_SRC emacs-lisp
(column-number-mode t)
#+END_SRC

[2014-03-17 17:54:25] 不显示行号，否则速度会非常慢

#+BEGIN_SRC lisp
;;另外一个显示行号的插件，个人更喜欢的风格
;(require 'linum)
;(global-linum-mode t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (global-display-line-numbers-mode t)
(setq display-line-numbers-width-start 5)

(add-hook 'org-mode-hook 'display-line-numbers-mode)
(add-hook 'python-mode-hook 'display-line-numbers-mode)
(add-hook 'c-mode-common-hook 'display-line-numbers-mode)
(add-hook 'emacs-lisp-mode-hook 'display-line-numbers-mode)
(add-hook 'sh-mode-hook 'display-line-numbers-mode)
(add-hook 'go-mode-hook 'display-line-numbers-mode)
#+END_SRC

** F5插入当前时间
insert current time，要加上(interactive)啊，为什么呢？

#+BEGIN_EXAMPLE
M-: (insert (format-time-string "[%Y-%m-%d %a %T]"))
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(global-set-key [(f5)] '(lambda () (interactive) 
(insert (format-time-string "[%Y-%m-%d %a %T]"))
))
#+END_SRC

** Reading

https://github.com/xahlee/xah_emacs_init/blob/master/xah_emacs_font.el From Xah Lee:

#+BEGIN_SRC emacs-lisp
(defun xah-toggle-margin-right ()
  "Toggle the right margin between `fill-column' or window width.
This command is convenient when reading novel, documentation."
  (interactive)
  (if (eq (cdr (window-margins)) nil)
      (set-window-margins nil 0 (- (window-body-width) fill-column))
    (set-window-margins nil 0 0)))
#+END_SRC

** Make window splitting more useful

I added these snippets to my .emacs so that when I split the screen with C-x 2 or C-x 3, 
it opens the previous buffer instead of giving me two panes with the same buffer:

Copied from http://www.reddit.com/r/emacs/comments/25v0eo/you_emacs_tips_and_tricks/chldury

#+BEGIN_SRC emacs-lisp
(defun vsplit-last-buffer ()
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun hsplit-last-buffer ()
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))

(global-set-key (kbd "C-x 3") 'vsplit-last-buffer)
(global-set-key (kbd "C-x 2") 'hsplit-last-buffer)
#+END_SRC

** 图片支持
[2014-09-18 08:49:12]

=M-x list-dynamics-libraries= 找到对应的dll的name。

可以运行下面几行代码检查一下是否已经支持了图片。

#+BEGIN_SRC lisp
(image-type-available-p 'gif)

(image-type-available-p 'jpeg)

(image-type-available-p 'tiff)

(image-type-available-p 'xbm)

(image-type-available-p 'xpm)

(image-type-available-p 'png)
#+END_SRC

这几个函数复制到Lisp模式的buffer，然后在每一行行尾按 *C-j* ，就可以看到每个函数运行的结果，返回 *t* 证明已经可以支持图片了。

win的emacs不能显示图片是因为编译后默认没有带几个dll文件。把dll copy到emacs安装目录的bin目录下，就可以显示图片了。

*** emacs 24.4
+ png
  [2014-11-18 周二 15:48:21] emacs 24.4需要libpng16-16.dll or libpng16.dll 和 zlib1.dll，都在libpng的压缩包里面
  可以从 http://sourceforge.net/projects/ezwinports/files/ 下载

*** emacs 24.3
+ png :: libpng14.dll

#+BEGIN_EXAMPLE
jpeg62.dll
libgcrypt-11.dll
libgnutls-26.dll
libpng14-14.dll
libtasn1-3.dll
libtiff3.dll
libungif4.dll
libXpm.dll
xpm4.dll
zlib1.dll
#+END_EXAMPLE

可以从 https://github.com/winterTTr/emacs-of-winterTTr/tree/master/.emacs.d/extra-bin/dlls 下载

** 输入特殊字符
[2014-09-29 周一 17:20:40]

+  :: C-q C-a

+ C-q X :: 是一个通用的输入特殊字符的解决办法，X 表示一个特殊字符， 在几乎所有的模式下，输入 =C-q= 然后是一个就可以输入这个特殊字符。
一般来说、所有的特殊的字符都和某一个特定的函数绑定在一起 了，例如 C-a , ASCII 1 , 表示 beginning-of-line 。 换行的字符就是 C-j ， ASCII 10。
除了输入 C-j ，还可以输入回车字符的 ASCII 的 8 进制数， 例如 C-q 1 2 。 因为 C-j 对应的 ACSII 是 10, 012 八进制 ， 0xA 十六进制。
#+BEGIN_SRC lisp
(setq read-quoted-char-radix 10)
;or
(setq read-quoted-char-radix 16)
#+END_SRC

可以改为把八进制改为十进制或者十六进制。或者用命令
#+BEGIN_EXAMPLE
M-x set-variable <RET> read-quoted-char-radix <RET>10 
#+END_EXAMPLE

** save the cursor position for every file you opened

Turn on save place so that when opening a file, the cursor will be at the last position.
#+BEGIN_SRC emacs-lisp
;; For GNU Emacs 24.5 and older versions
;; (require 'saveplace)
;; (setq save-place-file (concat user-emacs-directory "saveplace.el") ) ; use standard emacs dir
;; (setq-default save-place t)

;; For GNU Emacs 25.1 and newer versions
;; (setq-default save-place t)

(run-with-idle-timer
 1 nil
 #'(lambda ()
(use-package saveplace
  :ensure t
  :init (save-place-mode 1))
  ))
#+END_SRC

** mode-line
[2014-11-21 周五 10:35:59]

smart-mode-line和powerline都不好用，速度太慢。
#+BEGIN_SRC lisp
;; (use-package smart-mode-line
;;   :disabled t
;;   :init
;;   (progn
;;   (setq-default
;;    mode-line-format 
;;    '("%e"
;;      mode-line-front-space
;;      mode-line-mule-info
;;      mode-line-client
;;      mode-line-modified
;;      mode-line-remote
;;      mode-line-frame-identification
;;      mode-line-buffer-identification
;;      "   "
;;      mode-line-position
;;      (vc-mode vc-mode)
;;      "  "
;;      mode-line-modes
;;      mode-line-misc-info
;;      mode-line-end-spaces))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; 显示日期时间
(setq display-time-day-and-date t)

;(setq display-time-24hr-format t)
;(setq display-time-use-mail-icon t)
(setq display-time-interval 10)
(setq display-time-format "%Y-%m-%d %a %H:%M")
(setq display-time-default-load-average nil)
(display-time)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t
  :defer t)

(use-package highlight-parentheses
  :ensure t
  :defer t)

;(eval-after-load "yasnippet" '(diminish 'yas-minor-mode))
(eval-after-load "undo-tree" '(diminish 'undo-tree-mode))
;(eval-after-load "guide-key" '(diminish 'guide-key-mode))
;(eval-after-load "smartparens" '(diminish 'smartparens-mode))
;(eval-after-load "guide-key" '(diminish 'guide-key-mode))
(eval-after-load "eldoc" '(diminish 'eldoc-mode))
(eval-after-load "org-indent" '(diminish 'org-indent-mode))
(eval-after-load "highlight-parentheses" '(diminish 'highlight-parentheses-mode))

(diminish 'visual-line-mode)
#+END_SRC

#+BEGIN_SRC lisp
;; (use-package powerline
;;   :disabled t
;;   :ensure t
;;   :config 
;;     (progn
;;        (powerline-center-evil-theme)
;;        (setq powerline-arrow-shape 'arrow)
;;        (custom-set-faces  
;;          '(mode-line ((t (:foreground "white" :background "#8080ff" :box nil))))  
;;          ;; '(mode-line-inactive ((t (:foreground "white" :background "#ff8080" :box nil))))  
;;          )))
;;       ;; (powerline-default-theme)))
;;       ;; (powerline-center-evil-theme)))
#+END_SRC

*** doom-modeline
[2019-05-21 周二 17:05:01] 其实主要是为了用doom-modeline才修改doom-themes的。
如果不用doom-themes而是使用Emacs的deeper-blue，modeline的前景色会很难看，而且文件名看不清楚。

https://seagle0128.github.io/doom-modeline/ 国人写的，在emacs-china上看见了。

+ 优点
  1. 速度很快
  2. 显示很漂亮
     
+ Install
  1. all-the-icons包和里面的艺术字体，windows上手动安装字体。

//#+BEGIN_SRC emacs-lisp
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons
  :ensure t
  ;; :disabled t
  :defer 1
  )
  
(use-package doom-modeline
  :ensure t
  ;; :disabled t
  ;; :defer 1
  ;; :init
  :config
  (progn
    ;; How tall the mode-line should be (only respected in GUI Emacs).
    ;; (setq doom-modeline-height 25)
    
    ;; How wide the mode-line bar should be (only respected in GUI Emacs).
    ;; (setq doom-modeline-bar-width 3)

    ;; Whether show `all-the-icons' or not (if nil nothing will be showed).

    ;; emacs coredump with all-the-icons
    (setq doom-modeline-icon nil)
    
    ;; Whether show the icon for major mode. It respects `doom-modeline-icon'.
    (setq doom-modeline-major-mode-icon t)
    
    ;; Display color icons for `major-mode'. It respects `all-the-icons-color-icons'.
    (setq doom-modeline-major-mode-color-icon t)
    
    ;; Whether display minor modes or not. Non-nil to display in mode-line.
    (setq doom-modeline-minor-modes nil)
    
    ;; Slow Rendering. If you experience a slow down in performace when rendering multiple icons simultaneously, you can try setting the following variable
    (setq inhibit-compacting-font-caches t)
    
    ;; Whether display `lsp' state or not. Non-nil to display in mode-line.
    (setq doom-modeline-lsp nil)
    
    ;; Whether display mu4e notifications or not. Requires `mu4e-alert' package.
    (setq doom-modeline-mu4e nil)
    
    ;; Whether display irc notifications or not. Requires `circe' package.
    (setq doom-modeline-irc nil)
    )
  :hook (after-init . doom-modeline-mode))
#+END_SRC

* scheme [2017-03-02 周四 21:27:47]

;; (require 'cmuscheme)
#+BEGIN_SRC emacs-lisp
  (use-package cmuscheme
    :defer t)
  (setq scheme-program-name "racket")         ;; 如果用 Petite 就改成 "petite"
  ;; (setq scheme-program-name "scheme")         ;; 如果用 Petite 就改成 "petite"

  ;; bypass the interactive question and start the default interpreter
  (defun scheme-proc ()
    "Return the current Scheme process, starting one if necessary."
    (unless (and scheme-buffer
		 (get-buffer scheme-buffer)
		 (comint-check-proc scheme-buffer))
      (save-window-excursion
	(run-scheme scheme-program-name)))
    (or (scheme-get-process)
	(error "No current process. See variable `scheme-buffer'")))

  (defun scheme-split-window ()
    (cond
     ((= 1 (count-windows))
      (delete-other-windows)
      ;; (split-window-vertically (floor (* 0.68 (window-height))))
      (split-window-horizontally (floor (* 0.60 (window-width))))
      (other-window 1)
      (switch-to-buffer "*scheme*")
      (other-window 1))
     ((not (cl-find "*scheme*"
		 (mapcar (lambda (w) (buffer-name (window-buffer w)))
			 (window-list))
		 :test 'equal))
      (other-window 1)
      (switch-to-buffer "*scheme*")
      (other-window -1))))

  (defun scheme-send-last-sexp-split-window ()
    (interactive)
    (scheme-split-window)
    (scheme-send-last-sexp))

  (defun scheme-send-definition-split-window ()
    (interactive)
    (scheme-split-window)
    (scheme-send-definition))

  (add-hook 'scheme-mode-hook
    (lambda ()
      (paredit-mode 1)
      (evil-paredit-mode 1)
      (define-key scheme-mode-map (kbd "<f6>") 'scheme-send-last-sexp-split-window)
      (define-key scheme-mode-map (kbd "<f7>") 'scheme-send-definition-split-window)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; [2017-04-09 周日 00:20:25]
(use-package paren-face
  :defer t
  :ensure t
  :init (global-paren-face-mode 1)
)
#+END_SRC
* web-mode [2018-02-08 周四 17:03:42]

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :ensure t
  :defer t)
#+END_SRC
* markdown-mode

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :defer t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
  
* xah-find [2018-09-29 周六 22:09:48]
http://ergoemacs.org/emacs/elisp-xah-find-text.html

1. evil mode下按tab和enter都不能跳转到文件对应的地方，只能用鼠标，除非是emacs mode下。
2. 不知道是怎么找的扩展吗，如果打开一个 *.te的文件，默认扩展名就是 *.te，改改?

#+BEGIN_SRC emacs-lisp
(use-package xah-find
  :ensure t
  :defer t)
#+END_SRC

* emacs-lisp
[2014-09-27 01:58:44]

lisp语言入门，写得很不错，找不到原出处了 http://www.cnblogs.com/suiqirui19872005/archive/2007/12/05/984517.html

emacs自带的帮助也不错，可以了解emacs lisp的特点，和common lisp的区别慢慢体会。

** 括号高亮
http://www.emacswiki.org/emacs/HighlightParentheses

http://ergoemacs.org/emacs/emacs_editing_lisp.html

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          '(lambda ()
             (highlight-parentheses-mode)))

(define-globalized-minor-mode global-highlight-parentheses-mode
  highlight-parentheses-mode
  (lambda ()
    (highlight-parentheses-mode t)))
(global-highlight-parentheses-mode t)
#+END_SRC

** eldoc-mode
http://sachachua.com/blog/2014/06/read-lisp-tweak-emacs-beginner-24-understand-emacs-lisp-code/

turns on eldoc-mode, which displays the argument list for the current function. 
You can move your cursor around to see argument lists for other functions.
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+END_SRC

* magit
[2014-09-11 10:22:26] disable emacs自带的vc，用 *process monitor* 看，vc每次打开都会把支持的版本管理都查一遍，会比较慢。
但是去掉了以后，magit没法在status bar上显示文件在哪个branch上了。哎。

process monitor在用了vpn后会导致机器hang。

把vc disable后会快不少，还是去了吧。

#+BEGIN_SRC lisp
;; (custom-set-variables
;; '(vc-handled-backends (quote (Git))))

;; disable default vc
;(setq vc-handled-backends nil)
#+end_src

[2014-09-11 14:25:06] 即使更新到了0908的magit，仍然发现有多次调用git.exe的情况， *magit-status* 还是慢
把git的path设置到最前面，貌似速度也没快多少，最多0.001s吧。

;;(if (eq system-type 'windows-nt)
;;    (progn
;;      (setq exec-path (add-to-list 'exec-path "C:/Program Files/Git/bin"))
;;      (setenv "PATH" (concat "C:\\Program Files\\Git\\bin;" (getenv "PATH")))))

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :defer t
  :config
    (progn
      (setq magit-last-seen-setup-instructions "1.4.0")))
#+end_src

* gdb
#+BEGIN_SRC emacs-lisp
;; set gdb multi-windows when open

(setq gdb-many-windows t)

;; customize the gdb multi-windows
; (defadvice gdb-setup-windows (after my-setup-gdb-windows activate)
;   "My GDB UI"
;   (gdb-get-buffer-create 'gdb-stack-buffer)
;   (set-window-dedicated-p (selected-window) nil)
;   (switch-to-buffer gud-comint-buffer)
;   (delete-other-windows)
;   (let ((win0 (selected-window))
;         (win1 (split-window nil nil 'left))  ;; code and output
;         (win2 (split-window-below (/ (* (window-height) 3) 4)))  ;; stack
;         )
;     (select-window win2)
;     (gdb-set-window-buffer (gdb-stack-buffer-name))
;     (select-window win1)
;     (set-window-buffer
;      win1
;      (if gud-last-last-frame
;          (gud-find-file (car gud-last-last-frame))
;        (if gdb-main-file
;            (gud-find-file gdb-main-file)
;          ;; Put buffer list in window if we
;          ;; can't find a source file.
;          (list-buffers-noselect))))
;     (setq gdb-source-window (selected-window))
;     (let ((win3 (split-window nil (/ (* (window-height) 3) 4))))  ;; io
;       (gdb-set-window-buffer (gdb-get-buffer-create 'gdb-inferior-io) nil win3))
;     (select-window win0)
;     ))
#+END_SRC

* pyim 
https://github.com/tumashu/pyim

[2019-07-08 Mon 14:22:43] 如果用的话，demand 要设置，先输入英文，然后按 M-j , 选择候选词，翻页用 C-n/C-p 或者 +/- , 不能用 ,和.
#+BEGIN_SRC emacs-lisp
(use-package pyim
  :disabled t
  ;; :defer t
  :ensure t
  :demand t
  :config
  ;; 激活 basedict 拼音词库
  (use-package pyim-basedict
    :ensure nil
    :config (pyim-basedict-enable))

  (progn
    (setq default-input-method "pyim")

    (setq pyim-default-scheme 'quanpin)

    ;; 设置 pyim 探针设置，这是 pyim 高级功能设置，可以实现 *无痛* 中英文切换
    ;; 我自己使用的中英文动态切换规则是：
    ;; 1. 光标只有在注释里面时，才可以输入中文。
    ;; 2. 光标前是汉字字符时，才能输入中文。
    ;; 3. 使用 M-j 快捷键，强制将光标前的拼音字符串转换为中文。
    (setq-default pyim-english-input-switch-functions
                  '(pyim-probe-dynamic-english
                    pyim-probe-isearch-mode
                    pyim-probe-program-mode
                    pyim-probe-org-structure-template))

    (setq-default pyim-punctuation-half-width-functions
                  '(pyim-probe-punctuation-line-beginning
                    pyim-probe-punctuation-after-punctuation))

    ;; 开启拼音搜索功能
    (pyim-isearch-mode 1)

    ;; 使用 pupup-el 来绘制选词框, 如果用 emacs26, 建议设置
    ;; 为 'posframe, 速度很快并且菜单不会变形，不过需要用户
    ;; 手动安装 posframe 包。
    (setq pyim-page-tooltip 'popup)

    ;; 选词框显示5个候选词
    (setq pyim-page-length 9)

    (setq pyim-fuzzy-pinyin-alist
      '(("en" "eng")
        ("in" "ing")
        ("ch" "c")
        ("sh" "s")
        ("zh" "z")))
  )

  :bind
  (("M-j" . pyim-convert-code-at-point) ;与 pyim-probe-dynamic-english 配合
   ("C-;" . pyim-delete-word-from-personal-buffer)
   ;; ("," . pyim-page-previous-page)
   ;; ("." . pyim-page-next-page)
  )
)
#+END_SRC
* lang
** c
*** ccls [2019-06-14 Fri 17:27:58]
#+BEGIN_SRC emacs-lisp
(use-package ccls
  :disabled t
  :defer t
  :hook ((c-mode c++-mode objc-mode) .
         (lambda () (require 'ccls) (lsp))))
#+END_SRC
*** c-mode coding style [2019-01-05 周六 11:20:13]

emacs使用google-c-style
google c++编码规范很全面，现在已经逐渐习惯了这种编码规范，突然想到或许emacs中有合适的el支持这种规范，到网上一找，果然有。

http://google-styleguide.googlecode.com/svn/trunk/google-c-style.el

elpa中安装就可以了。

下载下来，放在emacs.d目录下，然后在.emacs配置文件中添加几行：

(add-to-list 'load-path (expand-file-name "~/.emacs.d"))
(require 'google-c-style)
(add-hook 'c-mode-common-hook 'google-set-c-style)
(add-hook 'c-mode-common-hook 'google-make-newline-indent)

(add-hook 'c-mode-common-hook
          (lambda ()
            (setq c-default-style "k&r" c-basic-offset 4)
            (c-set-offset 'substatement-open 0)))

#+BEGIN_SRC emacs-lisp

(setq c-default-style "linux")
(setq c-basic-offset 4)

(setq-default tab-width 4)
(setq-default indent-tabs-mode nil)

;; (setq tab-width 4)
;; (setq tab-stop-list ())
#+END_SRC
* xclipboard [2019-01-30 Wed 11:14:55]

use mouse-2 middle wheel to paste text to emacs.
#+BEGIN_SRC emacs-lisp
;(case system-type
;  ('darwin (unless window-system
;             (setq interprogram-cut-function
;                   (lambda (text &optional push)
;                     (let* ((process-connection-type nil)
;                            (pbproxy (start-process "pbcopy" "pbcopy" "/usr/bin/pbcopy")))
;                       (process-send-string pbproxy text)
;                       (process-send-eof pbproxy))))))
;  ('gnu/linux (progn
;                (setq x-select-enable-clipboard t)
;                (defun xsel-cut-function (text &optional push)
;                  (with-temp-buffer
;                    (insert text)
;                    (call-process-region (point-min) (point-max) "xsel" nil 0 nil "--clipboard" "--input")))
;                (defun xsel-paste-function()
;
;                  (let ((xsel-output (shell-command-to-string "xsel --clipboard --output")))
;                    (unless (string= (car kill-ring) xsel-output)
;                      xsel-output )))
;                (setq interprogram-cut-function 'xsel-cut-function)
;                (setq interprogram-paste-function 'xsel-paste-function))))

;(if (eq system-type 'gnu/linux)
;  (progn
;     (setq x-select-enable-clipboard t)
;     (defun xsel-cut-function (text &optional push)
;       (with-temp-buffer
;         (insert text)
;         (call-process-region (point-min) (point-max) "xsel" nil 0 nil "--clipboard" "--input")))
;     (defun xsel-paste-function()
;       (let ((xsel-output (shell-command-to-string "xsel --clipboard --output")))
;         (unless (string= (car kill-ring) xsel-output)
;           xsel-output )))
;     (setq interprogram-cut-function 'xsel-cut-function)
;     (setq interprogram-paste-function 'xsel-paste-function)))
#+END_SRC
* tools [2019-06-12 Wed 10:06:46]
** treemacs [2019-06-12 周三 09:41:52]

#+BEGIN_SRC emacs-lisp
(use-package treemacs
  ;; :ensure t
  :defer t
  :init
  (with-eval-after-load 'winum
    (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if (executable-find "python3") 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-follow-delay             0.2
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 nil
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-desc
          treemacs-space-between-root-nodes      nil
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-width                         30)

    ;; The default width and height of the icons is 22 pixels. If you are
    ;; using a Hi-DPI display, uncomment this to double the icon size.
    ;;(treemacs-resize-icons 44)
    ;;(treemacs-resize-icons 10)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)
    (pcase (cons (not (null (executable-find "git")))
                 (not (null (executable-find "python3"))))
      (`(t . t)
       (treemacs-git-mode 'deferred))
      (`(t . _)
       (treemacs-git-mode 'simple))))
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag)))

(use-package treemacs-evil
  :after treemacs evil
  :ensure t)

(use-package treemacs-projectile
  :after treemacs projectile
  :ensure t)

;; (use-package treemacs-icons-dired
;;   :after treemacs dired
;;   :ensure t
;;   :config (treemacs-icons-dired-mode))

(use-package treemacs-magit
  :after treemacs magit
  :ensure t)
#+END_SRC

** aweshell [2019-11-16 周六 15:10:26]

https://github.com/manateelazycat/lazycat-emacs/blob/master/site-lisp/config/init-key.el

#+BEGIN_SRC emacs-lisp
(use-package aweshell
  :load-path "~/.emacs.d/elisp/aweshell"
  :bind (("s-n" . aweshell-new)
     ("s-h" . aweshell-toggle)
     ("M-n M-n" . aweshell-dedicated-toggle)))
#+END_SRC

* 现在没用的配置
** 反显选中区域

emacs 23以后默认。
#+begin_src lisp
;(transient-mark-mode t) 
#+end_src
** Mode line format
[2014-09-16 18:18:58]

Display a more compact mode line.

#+BEGIN_SRC lisp
;(use-package smart-mode-line
;(defun my-line()
;  :init
;  (progn
;  (setq-default
;   mode-line-format 
;   '("%e"
;     mode-line-front-space
;     mode-line-mule-info
;     mode-line-client
;     mode-line-modified
;     mode-line-remote
;     mode-line-frame-identification
;     mode-line-buffer-identification
;     "   "
;     mode-line-position
;     (vc-mode vc-mode)
;     "  "
;     mode-line-modes
;     mode-line-misc-info
;     mode-line-end-spaces))))
;(my-line)
#+END_SRC
** ido

#+BEGIN_SRC lisp
;(require 'ido)
#+END_SRC

** smex
[2014-09-19 14:44:30] 有helm，不用smex了。

Smex is a M-x enhancement for Emacs. Built on top of IDO, it provides a convenient interface 
to your recently and most frequently used commands. And to all the other commands, too.

Extras: Limit commands to those relevant to the active major mode. Show frequently used commands that have no key bindings.

用了smex后，现在已经把command忘记得差不多了，现在magit的话，就会 *M-x magit* 直接联想了。呵呵。

#+BEGIN_SRC lisp
;(require 'smex)
;
;(global-set-key (kbd "M-x") 'smex)
;(global-set-key (kbd "M-X") 'smex-major-mode-commands)
;; This is your old M-x.
;;(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC
** htmlize

为了让org mode中的代码可以语法高亮，不知道新的org 8.2.7c是不是自带了，那就可以不用这个了。

#+BEGIN_SRC lisp
;(require 'htmlize)
#+END_SRC

** ace-jump [2014-11-20 周四 18:09:04]

#+BEGIN_SRC lisp
;;;
;;; ace jump mode major function
;;; 
;(autoload
;  'ace-jump-mode
;  "ace-jump-mode"
;  "Emacs quick move minor mode"
;  t)
;;; you can select the key you prefer to
;(define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
;
;;; 
;;; enable a more powerful jump back function from ace jump mode
;;;
;(autoload
;  'ace-jump-mode-pop-mark
;  "ace-jump-mode"
;  "Ace jump back:-)"
;  t)
;(eval-after-load "ace-jump-mode"
;  '(ace-jump-mode-enable-mark-sync))
;(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)
;
;;;If you use evil
;(define-key evil-normal-state-map (kbd "SPC") 'ace-jump-mode)
#+END_SRC 

